{"title":"8: Model Building","markdown":{"yaml":{"title":"8: Model Building","params":{"SHOW_SOLS":false,"TOGGLE":true},"editor_options":{"chunk_output_type":"console"}},"headingText":"Maximal Model","containsRefs":false,"markdown":"\n\n```{r}\n#| label: setup\n#| include: false\nsource('assets/setup.R')\nlibrary(xaringanExtra)\nlibrary(tidyverse)\nlibrary(patchwork)\nxaringanExtra::use_panelset()\nlibrary(lme4)\nlibrary(broom.mixed)\n```\n\n\n:::lo\nThis reading:  \n\n- extending the multilevel model to encompass more complex random effect structures\n\n- model building and common issues  \n\n:::\n\n\n\nRandom effect structures can get pretty complicated quite quickly. In confirmatory analyses, very often the random effects part is not of specific interest to us, but we wish to estimate random effects in order to more accurately partition up the variance in our outcome variable and provide better estimates of fixed effects (the bit we _are_ interested in).  \n\nThis process becomes a fine balancing act between choosing a random effect structure that most accurately reflects the underlying process we believe generated the data, and one that we are actually able to fit to our data without too much simplification. \n\n:::sticky\n__Fully Maximal Model__  \n\nThe \"maximal model\" is the model with all possible^[this doesn't mean simply including _every_ predictor in the fixed effects also in the random effects part. 'possible' refers to 'possible given the study design'] random effects included. \n\n:::\n\n\nTypically for many research designs, the following steps will keep you mostly on track to finding the maximal model.  \n\nStart by breaking up the model structure into these components:  \n\n`lmer(outcome ~ fixed effects + (random effects | grouping structure))`  \n\n1. Specify the `outcome ~ fixed effects` bit first. \n    - The outcome variable should be clear: it is the variable we are wishing to explain/predict. \n    - The fixed effects are the things we want to use to explain/predict variation in the outcome variable. These will often be the things that are of specific inferential interest along with potential confounders and other covariates. Just like the simple linear model.  \n    \n2. If there is a grouping structure to your data, and those groups (preferably n>7 or 8) are perceived as a random sample of a wider population (the specific groups aren't interesting to you), then consider including random intercepts (and possibly random slopes of predictors) for those groups `(1 + ... | grouping)`.  \n\n3. If there are multiple different grouping structures, is one nested within another? If so, we can specify this as `(1 | higher_grouping ) + (1 |  lower_grouping:higher_grouping)`.  \nIf the grouping structures are **not** nested, we can specify them as crossed: `(1 | grouping1) + (1 | grouping2)`.  \n\n\n4. If any of the predictors in the fixed effects vary **within** the groups, it might be possible to also include them as random effects. For predictors that instead vary **between** groups, it rarely makes sense to include these as by-group random effects. For example, if we had a model with `lmer(score ~ genetic_status + (1 + genetic_status | patient))` then we would be trying to model a process where \"the effect of genetic_status on scores is different for each patient\". But if you consider an individual patient, their genetic status never changes. For patient $i$, what is \"the effect of genetic status on score\"? It's undefined. This is because genetic status only varies _between_ patients.\n    - as a general rule, don't specify random effects that are not also specified as fixed effects (an exception could be specifically for model comparison, to isolate the contribution of the fixed effect).  \n    - Sometimes, things can vary within one grouping, but not within another. E.g., for a design in which patients are nested within hospitals `(1 | hospital) + (1 | patient:hospital)`, genetic_status varies _between_ patients, but _within_ hospitals. Therefore we could theoretically fit a random effect of `(1 + genetic_status | hospital)`, but __not__ one for `(1 + genetic_status | patient:hospital)`.\n    \n    \nOne common approach to fitting multilevel models is to first fit the maximal model (the most complex model _that the study design allows_, in which we include random effects for everything that makes _theoretical_ sense as varying by our groupings). Because this \"maximal model\" will often not converge or be too complext to be supported by our data, we then progress to simplifying our random effect structure until we obtain a converging model.  \n\n\n## Non-Convergence\n\nIssues of non-convergence can be caused by many things. If your model doesn't converge, it does *not necessarily* mean the fit is incorrect, however it is **is cause for concern**, and should be addressed before using the model, else you may end up reporting inferences which do not hold.  \n\nRemember that we fit these models with maximum likelihood estimation (MLE), a process that involves taking a guess at the model parameters that result in the greatest probability of the observed data, and step-by-step improving those guesses until we think we're at the most likely set of parameters - until the model 'converges'. Sometimes, however, MLE can sometimes get stuck, resulting in 'non-convergence'.  \nThere are lots of different things which you could do which *might* help your model to converge. A select few are detailed below:  \n\n::: {.callout-note collapse=\"true\"}\n#### Things we can try\n\n:::imp\n**most likely solutions:**  \n\n- double-check the model specification and the data  \n\n- Consider simplifying your model (more on this below)\n:::\n\n- center and scale continuous predictor variables (e.g. with `scale`)  \n\n- Change the optimization method (for example, here we change it to `bobyqa`):  \n    `lmer(..., control = lmerControl(optimizer=\"bobyqa\"))`  \n    `glmer(..., control = glmerControl(optimizer=\"bobyqa\"))`  \n\n- Use `allFit()` to try the fit with all available optimizers. This will of course be slow, but is considered 'the gold standard'; *\"if all optimizers converge to values that are practically equivalent, then we would consider the convergence warnings to be false positives.\"*  \n    `allopts <- allFit(model)`  \n    `summary(allopts)`\n\n::::{.columns}\n:::{.column width=\"50%\"}\n\n- Fine-tune an optimizer. Using the optCtrl argument to [g]lmerControl (see `?convergence` for details), we can have a lot of control over the optimizer. Recall that the optimizer is a method of iteratively assessing a set of parameters to maximise the probability of seeing the observed data^[instead of maximising the likelihood, more often (for practical reasons) our algorithms try to minimise $-2 \\times$ the log-likelihood]. We can change things such as the number of steps the algorithm keeps trying for, and the thresholds at which the algorithm stops (@fig-tolerance).  \n    \n:::\n\n:::{.column width=\"50%\"}\n```{r}\n#| label: fig-tolerance \n#| echo: false\n#| fig-cap: \"An optimizer will stop after a certain number of iterations, or when it meets a tolerance threshold\"\nknitr::include_graphics(\"images/tolerance.png\")\n```\n:::\n::::\n\n:::\n\n## Singular Fits\n\nAs well as convergence warnings, you may have noticed that some of our models over the last few weeks have been giving a warning message:  \n\n<p style=\"color:red\">boundary (singular) fit: see ?isSingular</p>\n\nUp to now, we've been largely ignoring these messages, but we should really have been addressing them in some way. 'Singular fit' warnings indicate that our model is likely to be 'overfitted' - that is, the random effects structure which we have specified is **too complex to be supported by the data**.  \n\nFor the more simple random effect structures (i.e. a random intercept + a random slope), we can often see this issue reflected in the variance components of the random effect, when variances get estimated at (or very close to) zero, and/or when correlations get estimated at (or very close to) 1 or -1.  \n\n```{r}\n#| include: false\ndf <- read_csv(\"https://uoepsy.github.io/data/stressweek1.csv\") |>\n  mutate(g=pid,b=CBD,x=day+100,y=stress) |>\n  group_by(g) |> mutate(y=y-mean(y))\nset.seed(5)\nmodel = lme4::lmer(y~1+x+(1+x|g),df |> ungroup() |> mutate(x=rnorm(nrow(df))))\n\n```\n\n```{r}\n#| echo: false\n#| label: fig-singular\n#| fig-cap: \"In simple random effect structures we can often easily see issues of overfitting as they are reflected in variances being estimated as 0 and/or correlations being estimated as perfect correlations of 1 or -1\"\nknitr::include_graphics(\"images/varcorrsingular.png\")\n```\n\nWith more complex structures it is not always so visible, but the handy `isSingular()` function can do a double check for this issue: \n\n```{r}\n#| echo: true\nisSingular(model)\n```\n\nIf it returns `TRUE` then it indicates our model might be overfitted.  \n\nWhat do we do in these cases? Simplify, simplify, simplify!  \n\n\n::: {.callout-note collapse=\"true\"}\n#### Scales can matter!\n\n<!-- Suppose that people tend to be between 140cm and 190cm tall and (for some reason) we decide to measure their height in kilometers. In these units, people tend to be between 0.00140km and 0.00190km tall. If we calculate the variance of height-in-km, we're going to get a very small number.  -->\n\nThe scale of our predictors can sometimes play a part here. If we were fitting a model of `shoe_size ~ height`, then the estimated coefficient is going to depend on how we measure height. If we measure it in millimeters, then we'll probably have a very small coefficient (people's shoe size will only change by a tiny amount for every 1mm height they gain), but if we measure height in kilometers, then we'll have a very big coefficient (\"grow an extra kilometer in height, and your shoe size will increase 10000 sizes\"!!).  \n\nIn the multilevel model, we're estimating the variances in these relationships across a set of clusters. If the coefficient is in millimeters, then the variance is in millimeters too, and so the number will be quite small. If it's in kilometers, the coefficient is in units 100,000 times bigger, and so is the variance.  \n\nScaling predictors doesn't change the relationship being studied, but it does change the numeric values we are asking our relationship to be presented in. As the estimation of multilevel models can get into difficulty when variances are too close to zero, you may occasionally receive messages such as those below.  \nPay attention to them, and check your variables. If some are on very different scales, then consider trying to rescale them to something that is still meaningful for you.  \n\n<p style=\"color:red\">Warning messages:<br>\n1: Some predictor variables are on very different scales:<br> consider rescaling</p>\n\n<p style=\"color:red\">Warning messages:<br>\n1: In checkConv(attr(opt, \"derivs\"), opt\\$par, ctrl = control\\$checkConv,  :<br>Model is nearly unidentifiable: large eigenvalue ratio<br>  - Rescale variables?</p>\n\n:::\n\n\n# Simplifying Random Effect Structures\n\nThere is no _right_ way to simplify random effect structures - it's about what kind of simplifications we are willing to make (which is a subjective decision). Key to the process of simplifying your random effects is to **think about how the data are generated**, and to **keep in mind your research question**. Asking yourself things such as \"do we have good reason to assume subjects might vary over time, or to assume that they will have different starting points (i.e., different intercepts)?\" can help you in reasoning through the problem.  \n\nExamining the variance components of a non-converging model can also help to point towards problematic terms. Be on the look out for random effects with little variance, or with near perfect correlation. \nWhen variance estimates are very low for a specific random effect term, this indicates that the model is not estimating this parameter to differ much between the levels of your grouping variable. It might, given the study design, be perfectly acceptable to remove this or simply include it as a fixed effect.\n\n#### Reasons to Include Random Slopes\n\n__random slopes of predictors of interest__  \nIf we want to make inferences about a fixed effect `x` that is measured **within** groups, then failing to include a corresponding random slope of `x` will increase the chance of making a type I error (we'll be more likely to conclude there _is_ an effect even if in reality there is no effect). This is because when we let each group have it's own slope of `x`, the estimated slope for the average group becomes less certain. \n\n__random slopes of covariates__  \nIf a fixed effect `c` that is measured within groups is not of inferential interest but is instead included in the model as a covariate, then it is less crucial to include a corresponding random slope of `c`, because the fixed effect is sufficient. However, including random slopes of `c` can improve the precision of the effects that we _are_ interested in, depending on the level of multicollinearity of those variables with `c`.  \n\n\n#### 'More Complex' Random Effect Terms\n\nComplex terms like interactions (e.g. `(1 + x1 * x2 | group)` are often causes of non-convergence or overfitting as they require more data to estimate group-level variability, and the interaction terms is often highly correlated with the individual effects. Prior to removing one of the terms completely, this could be simplified to `(1 + x1 + x2 | group)`).  \n\n#### Random Effect Correlations\n\nThe 'random effects' part of multilevel models includes not just variances of group-level effects, but also the correlations between different terms. The part of the output of the `VarCorr()` function that comes under \"Corr\" is a correlation matrix (i.e., a square symmetric matrix with the same columns as rows, and 1s on the diagonal, see @fig-varcorr).  \n\n```{r}\n#| echo: false\n#| label: fig-varcorr\n#| fig-cap: \"The VarCorr() function shows the same information as in the top part of the summary() output - the variances/std.deviations of each random effect term, and the lower half of the correlation matrix of these terms (the upper half filled in here for illustration)\"\nknitr::include_graphics(\"images/varcorr.png\")\n```\n\nSo what exactly do these correlations represent? Recall that the 'random effects' parts of our models is the estimation of how groups deviate around the fixed effects. \n\nIn estimating a random effect structure with intercepts and slopes, we are estimating these random effects as _jointly_ distibuted as a 'multivariate normal distribution'. \n\n$$\n\\begin{bmatrix} \\zeta_{0i} \\\\ \\zeta_{1i} \\end{bmatrix}\n\\sim N\n\\left(\n    \\begin{bmatrix} 0 \\\\ 0 \\end{bmatrix},\n    \\begin{bmatrix}\n        \\sigma_0 & \\rho_{01} \\\\\n        \\rho_{01} & \\sigma_1\n    \\end{bmatrix}\n\\right)\n$$\n\nIn essence, this means we are estimating means, variances (or standard deviations), and covariances (or correlations). The means of random effects are by definition 0, and we have already seen plenty about the variances thus far when talking about random effects. The correlations are the estimated relationship between different terms - e.g., do groups with higher intercepts tend to have higher/lower slopes?  \n\nIt often helps to think about what these would be like when the correlations are perfect (i.e. 1 or -1). In @fig-perfcor, we can see that in the Left hand panel, the higher a group starts, the more upwards the slope (and vice versa). In the Right hand panel the reverse is true - groups with higher intercepts have more downwards slopes. In the middle panel, where the correlation is 0, there's no systematic pattern between where the lines start and their angle across x.  \nWe can see a visualisation of the distributions below each plot, with each point representing a group in the model.    \n\n\n```{r}\n#| echo: false\n#| label: fig-perfcor\n#| out-width: \"100%\"\n#| fig-cap: \"Group specific lines when intercepts and slopes are perfectly positively (Left) and negatively (Right) correlated\"\nlibrary(ggforce)\nlibrary(ggfx)\nset.seed(665)\nN = 100\nn_groups = 10\ng = rep(1:n_groups, e = N/n_groups)\nx = rep(0:9,n_groups)\nre0 = rnorm(n_groups, sd = 1)\nre = re0[g]\nrex = re0/2\nre_x = rex[g]\nlp = (0 + re) + (1 + re_x) * x\ny = rnorm(N, mean = lp, sd = .1)\n\nd1=data.frame(x, g = factor(g), y)\n\nrex = -1*re0/2\nre_x = rex[g]\nlp = (0 + re) + (.1 + re_x) * x\ny = rnorm(N, mean = lp, sd = .1)\nd2=data.frame(x, g = factor(g), y)\n\nwhile(TRUE){\n  rex <<- rnorm(n_groups, sd = 1)\n  if(abs(cor(re0,rex))<.01){break}\n}\nre_x = rex[g]\nlp = (0 + re) + (.1 + re_x) * x\ny = rnorm(N, mean = lp, sd = .1)\nd3=data.frame(x, g = factor(g), y)\n\n\n\nggplot(d1)+\n  stat_smooth(aes(x=x,y=y,group=g,col=factor(g,levels=1:10)),method=lm,se=F,size=1)+\n  guides(col=\"none\")+\n  labs(x=\"x1\",y=\".fitted\",subtitle=\"cor(ints,slopes) = 1\") +\n  scale_y_continuous(breaks=NULL) -> pp1\n\nggplot(d2)+\n  stat_smooth(aes(x=x,y=y,group=g,col=factor(g,levels=1:10)),method=lm,se=F,size=1)+\n  guides(col=\"none\")+\n  labs(x=\"x1\",y=\".fitted\",subtitle=\"cor(ints,slopes) = -1\")+\n  scale_y_continuous(breaks=NULL) -> pp2\n\nggplot(d3)+\n  stat_smooth(aes(x=x,y=y,group=g,col=factor(g,levels=1:10)),method=lm,se=F,size=1)+\n  guides(col=\"none\")+\n  labs(x=\"x1\",y=\".fitted\",subtitle=\"cor(ints,slopes) = 0\")+\n  scale_y_continuous(breaks=NULL) -> pp3\n\n# \nm1 = lmer(y~1+x+(1+x|g),d1)\n#VarCorr(m1)\nm2 = lmer(y~1+x+(1+x|g),d2)\n#VarCorr(m2)\nm3 = lmer(y~1+x+(1+x|g),d3)\n#VarCorr(m3)\n\nlibrary(ggside)\npdist = MASS::mvrnorm(1e5, mu=c(0,0),Sigma=VarCorr(m1)[[1]]) |>\n  as_tibble() |>\n  mutate(int=`(Intercept)`)\nas.data.frame(ranef(m1)$g) |>\n  rownames_to_column() |>\n  mutate(int=`(Intercept)`,rowname=factor(rowname,levels=1:10)) |>\n  ggplot(aes(x=int,y=x)) +\n  guides(col=\"none\")+\n  stat_smooth(se=F,fullrange=T,col=\"black\",size=.5)+\n  with_blur(geom_point(aes(col=rowname),size=3,alpha=.8),sigma=1) + \n  #geom_density2d(data=pdist[1:1e4,]) +\n  scale_x_continuous(\"intercepts\")+\n  scale_y_continuous(\"slopes\")+\n  geom_xsidedensity(data=pdist,fill=\"#a41ae4\", alpha=.4,col=NA)+\n  geom_ysidedensity(data=pdist,fill=\"#a41ae4\", alpha=.4, col=NA)+\n  theme_ggside_void() -> pp4\n\npdist = MASS::mvrnorm(1e5, mu=c(0,0),Sigma=VarCorr(m2)[[1]]) |>\n  as_tibble() |>\n  mutate(int=`(Intercept)`)\nas.data.frame(ranef(m2)$g) |>\n  rownames_to_column() |>\n  mutate(int=`(Intercept)`,rowname=factor(rowname,levels=1:10)) |>\n  ggplot(aes(x=int,y=x)) +\n  guides(col=\"none\")+\n  stat_smooth(se=F,fullrange=T,col=\"black\",size=.5)+\n  with_blur(geom_point(aes(col=rowname),size=3,alpha=.8),sigma=1) + \n  #geom_density2d(data=pdist[1:1e4,]) +\n  scale_x_continuous(\"intercepts\")+\n  scale_y_continuous(\"slopes\")+\n  geom_xsidedensity(data=pdist,fill=\"#a41ae4\", alpha=.4,col=NA)+\n  geom_ysidedensity(data=pdist,fill=\"#a41ae4\", alpha=.4, col=NA)+\n  theme_ggside_void() -> pp5\n\npdist = MASS::mvrnorm(1e5, mu=c(0,0),Sigma=VarCorr(m3)[[1]]) |>\n  as_tibble() |>\n  mutate(int=`(Intercept)`)\nas.data.frame(ranef(m3)$g) |>\n  rownames_to_column() |>\n  mutate(int=`(Intercept)`,rowname=factor(rowname,levels=1:10)) |>\n  ggplot(aes(x=int,y=x)) +\n  guides(col=\"none\")+\n  #stat_smooth(se=F,fullrange=T,col=\"black\",size=.5)+\n  with_blur(geom_point(aes(col=rowname),size=3,alpha=.8),sigma=1) + \n  geom_density2d(data=pdist[1:1e4,],col=\"black\") +\n  scale_x_continuous(\"intercepts\")+\n  scale_y_continuous(\"slopes\")+\n  geom_xsidedensity(data=pdist,fill=\"#a41ae4\", alpha=.4,col=NA)+\n  geom_ysidedensity(data=pdist,fill=\"#a41ae4\", alpha=.4, col=NA)+\n  theme_ggside_void() -> pp6\n\n\n\n(pp1 + pp3 + pp2)/(pp4 + pp6 + pp5)\n\n\n```\n\nWe can choose (if we so wish) to __not__ estimate the correlations between random effects.  \n\nTODO from here \n\n\n\n\n#### Categorical Random Effects on the RHS\n\n- Random effects of categorical variables often result in the model attempting to estimate _a lot_ of variances and covariances. You could consider moving this to the right hand side `(1 + catX | group)` becoming `(1 | group) + (1 | group:catX)`\n\n::: {.callout-tip collapse=\"true\"}\n#### RHS explained\n\nWhen we have a categorical random effect (i.e. where the `x` in `(1 + x | g)` is a categorical variable), then model estimation can often get tricky, because \"the effect of x\" for a categorical variable with $k$ levels is identified via $k-1$ parameters, meaning we have a lot of variances and covariances to estimate when we include `x|g`.  \n\n:::: {.columns}\n:::{.column width=\"45%\"}\n\nWhen `x` is numeric:  \n\n```\nGroups   Name        Std.Dev. Corr  \ng        (Intercept) ...        \n         x           ...      ...\nResidual             ...     \n```\n\n:::\n:::{.column width=\"10%\"}\n\n:::\n:::{.column width=\"45%\"}\n\nWhen `x` is categorical with $k$ levels:  \n\n```\nGroups   Name        Std.Dev. Corr  \ng        (Intercept) ...        \n         xlevel2     ...      ...\n         xlevel3     ...      ...     ...\n         ...         ...      ...     ...     ...\n         xlevelk     ...      ...     ...     ...   ...\nResidual             ...     \n```\n\n:::\n::::\n\nHowever, we can use an alternative formation of the random effects by putting a categorical `x` into the right-hand side:  \nInstead of `(1 + x | g)` we can fit `(1 | g) + (1 | g:x)`.   \nThe symbol `:` in `g:x` is used to refer to the combination of `g` and `x`.  \n\n```{r}\n#| echo: false\ngx = tibble(\n  g = c(\"p1\",\"p1\",\"p1\",\"...\",\"p2\",\"p2\",\"...\"),\n  x = c(\"a\",\"a\",\"b\",\"...\",\"a\",\"b\",\"...\"),\n  `g:x` = as.character(interaction(g,x))\n)\ngx[c(4,7),3] <- \"...\"\ngx$g = paste0(\"  \",gx$g,\"   \")\ngx$x = paste0(\"  \",gx$x,\"   \")\nnames(gx)<-c(\"  g   \",\"  x   \",\"g:x\")\nas.data.frame(gx)\n```\n\nIt's a bit weird to think about it, but these two formulations of the random effects can kind of represent the same idea:  \n\n- `(1 + x | g)`:  each group of `g` can have a different intercept and a different effect of `x`  \n- `(1 | g) + (1 | g:x)`: each group of `g` can have a different intercept, and each level of x within each `g` can have a different intercept.  \n\nBoth of these allow the outcome `y` to change across `x` differently for each group in `g` (i.e. both of them result in `y` being different for each level of `x` in each group `g`).  \nThe first does so explicitly by estimating the group level variance of the `y~x` effect.  \nThe second one estimates the variance of $y$ between groups, and also the variance of $y$ between 'levels of x within groups'. In doing so, it achieves more or less the same thing, but by capturing these as intercept variances between levels of `x`, we don't have to worry about lots of covariances:  \n\n\n:::: {.columns}\n:::{.column width=\"45%\"}\n`(1 + x | g)`  \n\n```\nGroups   Name        Std.Dev. Corr  \ng        (Intercept) ...        \n         xlevel2     ...      ...\n         xlevel3     ...      ...     ...\n         ...         ...      ...     ...     ...\n         xlevelk     ...      ...     ...     ...   ...\nResidual             ...     \n```\n\n:::\n:::{.column width=\"10%\"}\n\n:::\n:::{.column width=\"45%\"}\n`(1 | g) + (1 | g:x)`  \n\n\n```\nGroups   Name        Std.Dev. \ng        (Intercept) ...        \ng.x      (Intercept) ...        \nResidual             ...     \n```\n\n:::\n::::\n\n:::\n\n\n::: {.callout-warning collapse=\"true\"}\n#### optional: data-driven approaches \n\nlibrary(buildmer)\nbuildmer(formula,buildmerControl=buildmerControl(direction=c(\"order\",\"backward\"), crit=\"LRT\"))\n\n\n:::\n\n\n\n::: {.callout-warning collapse=\"true\"}\n#### optional: PCA on the random effect variance-covariance matrix \n\n\n1. fit maximal\n2. summary(rePCA(model))\n3. fit ZCP\n\n\n\n\n\n\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n\n","srcMarkdownNoYaml":"\n\n```{r}\n#| label: setup\n#| include: false\nsource('assets/setup.R')\nlibrary(xaringanExtra)\nlibrary(tidyverse)\nlibrary(patchwork)\nxaringanExtra::use_panelset()\nlibrary(lme4)\nlibrary(broom.mixed)\n```\n\n\n:::lo\nThis reading:  \n\n- extending the multilevel model to encompass more complex random effect structures\n\n- model building and common issues  \n\n:::\n\n\n# Maximal Model\n\nRandom effect structures can get pretty complicated quite quickly. In confirmatory analyses, very often the random effects part is not of specific interest to us, but we wish to estimate random effects in order to more accurately partition up the variance in our outcome variable and provide better estimates of fixed effects (the bit we _are_ interested in).  \n\nThis process becomes a fine balancing act between choosing a random effect structure that most accurately reflects the underlying process we believe generated the data, and one that we are actually able to fit to our data without too much simplification. \n\n:::sticky\n__Fully Maximal Model__  \n\nThe \"maximal model\" is the model with all possible^[this doesn't mean simply including _every_ predictor in the fixed effects also in the random effects part. 'possible' refers to 'possible given the study design'] random effects included. \n\n:::\n\n\nTypically for many research designs, the following steps will keep you mostly on track to finding the maximal model.  \n\nStart by breaking up the model structure into these components:  \n\n`lmer(outcome ~ fixed effects + (random effects | grouping structure))`  \n\n1. Specify the `outcome ~ fixed effects` bit first. \n    - The outcome variable should be clear: it is the variable we are wishing to explain/predict. \n    - The fixed effects are the things we want to use to explain/predict variation in the outcome variable. These will often be the things that are of specific inferential interest along with potential confounders and other covariates. Just like the simple linear model.  \n    \n2. If there is a grouping structure to your data, and those groups (preferably n>7 or 8) are perceived as a random sample of a wider population (the specific groups aren't interesting to you), then consider including random intercepts (and possibly random slopes of predictors) for those groups `(1 + ... | grouping)`.  \n\n3. If there are multiple different grouping structures, is one nested within another? If so, we can specify this as `(1 | higher_grouping ) + (1 |  lower_grouping:higher_grouping)`.  \nIf the grouping structures are **not** nested, we can specify them as crossed: `(1 | grouping1) + (1 | grouping2)`.  \n\n\n4. If any of the predictors in the fixed effects vary **within** the groups, it might be possible to also include them as random effects. For predictors that instead vary **between** groups, it rarely makes sense to include these as by-group random effects. For example, if we had a model with `lmer(score ~ genetic_status + (1 + genetic_status | patient))` then we would be trying to model a process where \"the effect of genetic_status on scores is different for each patient\". But if you consider an individual patient, their genetic status never changes. For patient $i$, what is \"the effect of genetic status on score\"? It's undefined. This is because genetic status only varies _between_ patients.\n    - as a general rule, don't specify random effects that are not also specified as fixed effects (an exception could be specifically for model comparison, to isolate the contribution of the fixed effect).  \n    - Sometimes, things can vary within one grouping, but not within another. E.g., for a design in which patients are nested within hospitals `(1 | hospital) + (1 | patient:hospital)`, genetic_status varies _between_ patients, but _within_ hospitals. Therefore we could theoretically fit a random effect of `(1 + genetic_status | hospital)`, but __not__ one for `(1 + genetic_status | patient:hospital)`.\n    \n    \nOne common approach to fitting multilevel models is to first fit the maximal model (the most complex model _that the study design allows_, in which we include random effects for everything that makes _theoretical_ sense as varying by our groupings). Because this \"maximal model\" will often not converge or be too complext to be supported by our data, we then progress to simplifying our random effect structure until we obtain a converging model.  \n\n\n## Non-Convergence\n\nIssues of non-convergence can be caused by many things. If your model doesn't converge, it does *not necessarily* mean the fit is incorrect, however it is **is cause for concern**, and should be addressed before using the model, else you may end up reporting inferences which do not hold.  \n\nRemember that we fit these models with maximum likelihood estimation (MLE), a process that involves taking a guess at the model parameters that result in the greatest probability of the observed data, and step-by-step improving those guesses until we think we're at the most likely set of parameters - until the model 'converges'. Sometimes, however, MLE can sometimes get stuck, resulting in 'non-convergence'.  \nThere are lots of different things which you could do which *might* help your model to converge. A select few are detailed below:  \n\n::: {.callout-note collapse=\"true\"}\n#### Things we can try\n\n:::imp\n**most likely solutions:**  \n\n- double-check the model specification and the data  \n\n- Consider simplifying your model (more on this below)\n:::\n\n- center and scale continuous predictor variables (e.g. with `scale`)  \n\n- Change the optimization method (for example, here we change it to `bobyqa`):  \n    `lmer(..., control = lmerControl(optimizer=\"bobyqa\"))`  \n    `glmer(..., control = glmerControl(optimizer=\"bobyqa\"))`  \n\n- Use `allFit()` to try the fit with all available optimizers. This will of course be slow, but is considered 'the gold standard'; *\"if all optimizers converge to values that are practically equivalent, then we would consider the convergence warnings to be false positives.\"*  \n    `allopts <- allFit(model)`  \n    `summary(allopts)`\n\n::::{.columns}\n:::{.column width=\"50%\"}\n\n- Fine-tune an optimizer. Using the optCtrl argument to [g]lmerControl (see `?convergence` for details), we can have a lot of control over the optimizer. Recall that the optimizer is a method of iteratively assessing a set of parameters to maximise the probability of seeing the observed data^[instead of maximising the likelihood, more often (for practical reasons) our algorithms try to minimise $-2 \\times$ the log-likelihood]. We can change things such as the number of steps the algorithm keeps trying for, and the thresholds at which the algorithm stops (@fig-tolerance).  \n    \n:::\n\n:::{.column width=\"50%\"}\n```{r}\n#| label: fig-tolerance \n#| echo: false\n#| fig-cap: \"An optimizer will stop after a certain number of iterations, or when it meets a tolerance threshold\"\nknitr::include_graphics(\"images/tolerance.png\")\n```\n:::\n::::\n\n:::\n\n## Singular Fits\n\nAs well as convergence warnings, you may have noticed that some of our models over the last few weeks have been giving a warning message:  \n\n<p style=\"color:red\">boundary (singular) fit: see ?isSingular</p>\n\nUp to now, we've been largely ignoring these messages, but we should really have been addressing them in some way. 'Singular fit' warnings indicate that our model is likely to be 'overfitted' - that is, the random effects structure which we have specified is **too complex to be supported by the data**.  \n\nFor the more simple random effect structures (i.e. a random intercept + a random slope), we can often see this issue reflected in the variance components of the random effect, when variances get estimated at (or very close to) zero, and/or when correlations get estimated at (or very close to) 1 or -1.  \n\n```{r}\n#| include: false\ndf <- read_csv(\"https://uoepsy.github.io/data/stressweek1.csv\") |>\n  mutate(g=pid,b=CBD,x=day+100,y=stress) |>\n  group_by(g) |> mutate(y=y-mean(y))\nset.seed(5)\nmodel = lme4::lmer(y~1+x+(1+x|g),df |> ungroup() |> mutate(x=rnorm(nrow(df))))\n\n```\n\n```{r}\n#| echo: false\n#| label: fig-singular\n#| fig-cap: \"In simple random effect structures we can often easily see issues of overfitting as they are reflected in variances being estimated as 0 and/or correlations being estimated as perfect correlations of 1 or -1\"\nknitr::include_graphics(\"images/varcorrsingular.png\")\n```\n\nWith more complex structures it is not always so visible, but the handy `isSingular()` function can do a double check for this issue: \n\n```{r}\n#| echo: true\nisSingular(model)\n```\n\nIf it returns `TRUE` then it indicates our model might be overfitted.  \n\nWhat do we do in these cases? Simplify, simplify, simplify!  \n\n\n::: {.callout-note collapse=\"true\"}\n#### Scales can matter!\n\n<!-- Suppose that people tend to be between 140cm and 190cm tall and (for some reason) we decide to measure their height in kilometers. In these units, people tend to be between 0.00140km and 0.00190km tall. If we calculate the variance of height-in-km, we're going to get a very small number.  -->\n\nThe scale of our predictors can sometimes play a part here. If we were fitting a model of `shoe_size ~ height`, then the estimated coefficient is going to depend on how we measure height. If we measure it in millimeters, then we'll probably have a very small coefficient (people's shoe size will only change by a tiny amount for every 1mm height they gain), but if we measure height in kilometers, then we'll have a very big coefficient (\"grow an extra kilometer in height, and your shoe size will increase 10000 sizes\"!!).  \n\nIn the multilevel model, we're estimating the variances in these relationships across a set of clusters. If the coefficient is in millimeters, then the variance is in millimeters too, and so the number will be quite small. If it's in kilometers, the coefficient is in units 100,000 times bigger, and so is the variance.  \n\nScaling predictors doesn't change the relationship being studied, but it does change the numeric values we are asking our relationship to be presented in. As the estimation of multilevel models can get into difficulty when variances are too close to zero, you may occasionally receive messages such as those below.  \nPay attention to them, and check your variables. If some are on very different scales, then consider trying to rescale them to something that is still meaningful for you.  \n\n<p style=\"color:red\">Warning messages:<br>\n1: Some predictor variables are on very different scales:<br> consider rescaling</p>\n\n<p style=\"color:red\">Warning messages:<br>\n1: In checkConv(attr(opt, \"derivs\"), opt\\$par, ctrl = control\\$checkConv,  :<br>Model is nearly unidentifiable: large eigenvalue ratio<br>  - Rescale variables?</p>\n\n:::\n\n\n# Simplifying Random Effect Structures\n\nThere is no _right_ way to simplify random effect structures - it's about what kind of simplifications we are willing to make (which is a subjective decision). Key to the process of simplifying your random effects is to **think about how the data are generated**, and to **keep in mind your research question**. Asking yourself things such as \"do we have good reason to assume subjects might vary over time, or to assume that they will have different starting points (i.e., different intercepts)?\" can help you in reasoning through the problem.  \n\nExamining the variance components of a non-converging model can also help to point towards problematic terms. Be on the look out for random effects with little variance, or with near perfect correlation. \nWhen variance estimates are very low for a specific random effect term, this indicates that the model is not estimating this parameter to differ much between the levels of your grouping variable. It might, given the study design, be perfectly acceptable to remove this or simply include it as a fixed effect.\n\n#### Reasons to Include Random Slopes\n\n__random slopes of predictors of interest__  \nIf we want to make inferences about a fixed effect `x` that is measured **within** groups, then failing to include a corresponding random slope of `x` will increase the chance of making a type I error (we'll be more likely to conclude there _is_ an effect even if in reality there is no effect). This is because when we let each group have it's own slope of `x`, the estimated slope for the average group becomes less certain. \n\n__random slopes of covariates__  \nIf a fixed effect `c` that is measured within groups is not of inferential interest but is instead included in the model as a covariate, then it is less crucial to include a corresponding random slope of `c`, because the fixed effect is sufficient. However, including random slopes of `c` can improve the precision of the effects that we _are_ interested in, depending on the level of multicollinearity of those variables with `c`.  \n\n\n#### 'More Complex' Random Effect Terms\n\nComplex terms like interactions (e.g. `(1 + x1 * x2 | group)` are often causes of non-convergence or overfitting as they require more data to estimate group-level variability, and the interaction terms is often highly correlated with the individual effects. Prior to removing one of the terms completely, this could be simplified to `(1 + x1 + x2 | group)`).  \n\n#### Random Effect Correlations\n\nThe 'random effects' part of multilevel models includes not just variances of group-level effects, but also the correlations between different terms. The part of the output of the `VarCorr()` function that comes under \"Corr\" is a correlation matrix (i.e., a square symmetric matrix with the same columns as rows, and 1s on the diagonal, see @fig-varcorr).  \n\n```{r}\n#| echo: false\n#| label: fig-varcorr\n#| fig-cap: \"The VarCorr() function shows the same information as in the top part of the summary() output - the variances/std.deviations of each random effect term, and the lower half of the correlation matrix of these terms (the upper half filled in here for illustration)\"\nknitr::include_graphics(\"images/varcorr.png\")\n```\n\nSo what exactly do these correlations represent? Recall that the 'random effects' parts of our models is the estimation of how groups deviate around the fixed effects. \n\nIn estimating a random effect structure with intercepts and slopes, we are estimating these random effects as _jointly_ distibuted as a 'multivariate normal distribution'. \n\n$$\n\\begin{bmatrix} \\zeta_{0i} \\\\ \\zeta_{1i} \\end{bmatrix}\n\\sim N\n\\left(\n    \\begin{bmatrix} 0 \\\\ 0 \\end{bmatrix},\n    \\begin{bmatrix}\n        \\sigma_0 & \\rho_{01} \\\\\n        \\rho_{01} & \\sigma_1\n    \\end{bmatrix}\n\\right)\n$$\n\nIn essence, this means we are estimating means, variances (or standard deviations), and covariances (or correlations). The means of random effects are by definition 0, and we have already seen plenty about the variances thus far when talking about random effects. The correlations are the estimated relationship between different terms - e.g., do groups with higher intercepts tend to have higher/lower slopes?  \n\nIt often helps to think about what these would be like when the correlations are perfect (i.e. 1 or -1). In @fig-perfcor, we can see that in the Left hand panel, the higher a group starts, the more upwards the slope (and vice versa). In the Right hand panel the reverse is true - groups with higher intercepts have more downwards slopes. In the middle panel, where the correlation is 0, there's no systematic pattern between where the lines start and their angle across x.  \nWe can see a visualisation of the distributions below each plot, with each point representing a group in the model.    \n\n\n```{r}\n#| echo: false\n#| label: fig-perfcor\n#| out-width: \"100%\"\n#| fig-cap: \"Group specific lines when intercepts and slopes are perfectly positively (Left) and negatively (Right) correlated\"\nlibrary(ggforce)\nlibrary(ggfx)\nset.seed(665)\nN = 100\nn_groups = 10\ng = rep(1:n_groups, e = N/n_groups)\nx = rep(0:9,n_groups)\nre0 = rnorm(n_groups, sd = 1)\nre = re0[g]\nrex = re0/2\nre_x = rex[g]\nlp = (0 + re) + (1 + re_x) * x\ny = rnorm(N, mean = lp, sd = .1)\n\nd1=data.frame(x, g = factor(g), y)\n\nrex = -1*re0/2\nre_x = rex[g]\nlp = (0 + re) + (.1 + re_x) * x\ny = rnorm(N, mean = lp, sd = .1)\nd2=data.frame(x, g = factor(g), y)\n\nwhile(TRUE){\n  rex <<- rnorm(n_groups, sd = 1)\n  if(abs(cor(re0,rex))<.01){break}\n}\nre_x = rex[g]\nlp = (0 + re) + (.1 + re_x) * x\ny = rnorm(N, mean = lp, sd = .1)\nd3=data.frame(x, g = factor(g), y)\n\n\n\nggplot(d1)+\n  stat_smooth(aes(x=x,y=y,group=g,col=factor(g,levels=1:10)),method=lm,se=F,size=1)+\n  guides(col=\"none\")+\n  labs(x=\"x1\",y=\".fitted\",subtitle=\"cor(ints,slopes) = 1\") +\n  scale_y_continuous(breaks=NULL) -> pp1\n\nggplot(d2)+\n  stat_smooth(aes(x=x,y=y,group=g,col=factor(g,levels=1:10)),method=lm,se=F,size=1)+\n  guides(col=\"none\")+\n  labs(x=\"x1\",y=\".fitted\",subtitle=\"cor(ints,slopes) = -1\")+\n  scale_y_continuous(breaks=NULL) -> pp2\n\nggplot(d3)+\n  stat_smooth(aes(x=x,y=y,group=g,col=factor(g,levels=1:10)),method=lm,se=F,size=1)+\n  guides(col=\"none\")+\n  labs(x=\"x1\",y=\".fitted\",subtitle=\"cor(ints,slopes) = 0\")+\n  scale_y_continuous(breaks=NULL) -> pp3\n\n# \nm1 = lmer(y~1+x+(1+x|g),d1)\n#VarCorr(m1)\nm2 = lmer(y~1+x+(1+x|g),d2)\n#VarCorr(m2)\nm3 = lmer(y~1+x+(1+x|g),d3)\n#VarCorr(m3)\n\nlibrary(ggside)\npdist = MASS::mvrnorm(1e5, mu=c(0,0),Sigma=VarCorr(m1)[[1]]) |>\n  as_tibble() |>\n  mutate(int=`(Intercept)`)\nas.data.frame(ranef(m1)$g) |>\n  rownames_to_column() |>\n  mutate(int=`(Intercept)`,rowname=factor(rowname,levels=1:10)) |>\n  ggplot(aes(x=int,y=x)) +\n  guides(col=\"none\")+\n  stat_smooth(se=F,fullrange=T,col=\"black\",size=.5)+\n  with_blur(geom_point(aes(col=rowname),size=3,alpha=.8),sigma=1) + \n  #geom_density2d(data=pdist[1:1e4,]) +\n  scale_x_continuous(\"intercepts\")+\n  scale_y_continuous(\"slopes\")+\n  geom_xsidedensity(data=pdist,fill=\"#a41ae4\", alpha=.4,col=NA)+\n  geom_ysidedensity(data=pdist,fill=\"#a41ae4\", alpha=.4, col=NA)+\n  theme_ggside_void() -> pp4\n\npdist = MASS::mvrnorm(1e5, mu=c(0,0),Sigma=VarCorr(m2)[[1]]) |>\n  as_tibble() |>\n  mutate(int=`(Intercept)`)\nas.data.frame(ranef(m2)$g) |>\n  rownames_to_column() |>\n  mutate(int=`(Intercept)`,rowname=factor(rowname,levels=1:10)) |>\n  ggplot(aes(x=int,y=x)) +\n  guides(col=\"none\")+\n  stat_smooth(se=F,fullrange=T,col=\"black\",size=.5)+\n  with_blur(geom_point(aes(col=rowname),size=3,alpha=.8),sigma=1) + \n  #geom_density2d(data=pdist[1:1e4,]) +\n  scale_x_continuous(\"intercepts\")+\n  scale_y_continuous(\"slopes\")+\n  geom_xsidedensity(data=pdist,fill=\"#a41ae4\", alpha=.4,col=NA)+\n  geom_ysidedensity(data=pdist,fill=\"#a41ae4\", alpha=.4, col=NA)+\n  theme_ggside_void() -> pp5\n\npdist = MASS::mvrnorm(1e5, mu=c(0,0),Sigma=VarCorr(m3)[[1]]) |>\n  as_tibble() |>\n  mutate(int=`(Intercept)`)\nas.data.frame(ranef(m3)$g) |>\n  rownames_to_column() |>\n  mutate(int=`(Intercept)`,rowname=factor(rowname,levels=1:10)) |>\n  ggplot(aes(x=int,y=x)) +\n  guides(col=\"none\")+\n  #stat_smooth(se=F,fullrange=T,col=\"black\",size=.5)+\n  with_blur(geom_point(aes(col=rowname),size=3,alpha=.8),sigma=1) + \n  geom_density2d(data=pdist[1:1e4,],col=\"black\") +\n  scale_x_continuous(\"intercepts\")+\n  scale_y_continuous(\"slopes\")+\n  geom_xsidedensity(data=pdist,fill=\"#a41ae4\", alpha=.4,col=NA)+\n  geom_ysidedensity(data=pdist,fill=\"#a41ae4\", alpha=.4, col=NA)+\n  theme_ggside_void() -> pp6\n\n\n\n(pp1 + pp3 + pp2)/(pp4 + pp6 + pp5)\n\n\n```\n\nWe can choose (if we so wish) to __not__ estimate the correlations between random effects.  \n\nTODO from here \n\n\n\n\n#### Categorical Random Effects on the RHS\n\n- Random effects of categorical variables often result in the model attempting to estimate _a lot_ of variances and covariances. You could consider moving this to the right hand side `(1 + catX | group)` becoming `(1 | group) + (1 | group:catX)`\n\n::: {.callout-tip collapse=\"true\"}\n#### RHS explained\n\nWhen we have a categorical random effect (i.e. where the `x` in `(1 + x | g)` is a categorical variable), then model estimation can often get tricky, because \"the effect of x\" for a categorical variable with $k$ levels is identified via $k-1$ parameters, meaning we have a lot of variances and covariances to estimate when we include `x|g`.  \n\n:::: {.columns}\n:::{.column width=\"45%\"}\n\nWhen `x` is numeric:  \n\n```\nGroups   Name        Std.Dev. Corr  \ng        (Intercept) ...        \n         x           ...      ...\nResidual             ...     \n```\n\n:::\n:::{.column width=\"10%\"}\n\n:::\n:::{.column width=\"45%\"}\n\nWhen `x` is categorical with $k$ levels:  \n\n```\nGroups   Name        Std.Dev. Corr  \ng        (Intercept) ...        \n         xlevel2     ...      ...\n         xlevel3     ...      ...     ...\n         ...         ...      ...     ...     ...\n         xlevelk     ...      ...     ...     ...   ...\nResidual             ...     \n```\n\n:::\n::::\n\nHowever, we can use an alternative formation of the random effects by putting a categorical `x` into the right-hand side:  \nInstead of `(1 + x | g)` we can fit `(1 | g) + (1 | g:x)`.   \nThe symbol `:` in `g:x` is used to refer to the combination of `g` and `x`.  \n\n```{r}\n#| echo: false\ngx = tibble(\n  g = c(\"p1\",\"p1\",\"p1\",\"...\",\"p2\",\"p2\",\"...\"),\n  x = c(\"a\",\"a\",\"b\",\"...\",\"a\",\"b\",\"...\"),\n  `g:x` = as.character(interaction(g,x))\n)\ngx[c(4,7),3] <- \"...\"\ngx$g = paste0(\"  \",gx$g,\"   \")\ngx$x = paste0(\"  \",gx$x,\"   \")\nnames(gx)<-c(\"  g   \",\"  x   \",\"g:x\")\nas.data.frame(gx)\n```\n\nIt's a bit weird to think about it, but these two formulations of the random effects can kind of represent the same idea:  \n\n- `(1 + x | g)`:  each group of `g` can have a different intercept and a different effect of `x`  \n- `(1 | g) + (1 | g:x)`: each group of `g` can have a different intercept, and each level of x within each `g` can have a different intercept.  \n\nBoth of these allow the outcome `y` to change across `x` differently for each group in `g` (i.e. both of them result in `y` being different for each level of `x` in each group `g`).  \nThe first does so explicitly by estimating the group level variance of the `y~x` effect.  \nThe second one estimates the variance of $y$ between groups, and also the variance of $y$ between 'levels of x within groups'. In doing so, it achieves more or less the same thing, but by capturing these as intercept variances between levels of `x`, we don't have to worry about lots of covariances:  \n\n\n:::: {.columns}\n:::{.column width=\"45%\"}\n`(1 + x | g)`  \n\n```\nGroups   Name        Std.Dev. Corr  \ng        (Intercept) ...        \n         xlevel2     ...      ...\n         xlevel3     ...      ...     ...\n         ...         ...      ...     ...     ...\n         xlevelk     ...      ...     ...     ...   ...\nResidual             ...     \n```\n\n:::\n:::{.column width=\"10%\"}\n\n:::\n:::{.column width=\"45%\"}\n`(1 | g) + (1 | g:x)`  \n\n\n```\nGroups   Name        Std.Dev. \ng        (Intercept) ...        \ng.x      (Intercept) ...        \nResidual             ...     \n```\n\n:::\n::::\n\n:::\n\n\n::: {.callout-warning collapse=\"true\"}\n#### optional: data-driven approaches \n\nlibrary(buildmer)\nbuildmer(formula,buildmerControl=buildmerControl(direction=c(\"order\",\"backward\"), crit=\"LRT\"))\n\n\n:::\n\n\n\n::: {.callout-warning collapse=\"true\"}\n#### optional: PCA on the random effect variance-covariance matrix \n\n\n1. fit maximal\n2. summary(rePCA(model))\n3. fit ZCP\n\n\n\n\n\n\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"include-in-header":["assets/toggling.html"],"number-sections":false,"output-file":"08_modelbuilding.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.340","toc_float":true,"link-citations":true,"theme":["cosmo","assets/style-labs.scss"],"title":"8: Model Building","params":{"SHOW_SOLS":false,"TOGGLE":true},"editor_options":{"chunk_output_type":"console"}},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}