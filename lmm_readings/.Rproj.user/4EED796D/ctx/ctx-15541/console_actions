{
    "type": [
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        0,
        1,
        2,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        3,
        3,
        0,
        1,
        2,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        3,
        0,
        1,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        0,
        1,
        3,
        3,
        0,
        1,
        3,
        0,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        2
    ],
    "data": [
        "> ",
        "res = MASS::mvrnorm(n=n_groups,",
        "+ ",
        "                    mu=c(0,0),Sigma=matrix(c(2,0,0,.6),nrow=2))",
        "> ",
        "re0 = res[,1]",
        "> ",
        "re  = re0[g]",
        "> ",
        "rex = res[,2]",
        "> ",
        "re_x  = rex[g]",
        "> ",
        "lp = (-.5 + re) - (.4 + re_x)*scale(x)[,1] + 1.6*(b==\"a\")",
        "> ",
        "y_bin = rbinom(N, size = 1, prob = plogis(lp))",
        "> ",
        "y = lp + rnorm(N,0,1.3)",
        "> ",
        "df = data.frame(x = x, g=factor(g), b=b,y_bin)",
        "> ",
        "mnames = unique(randomNames::randomNames(n_groups*4,which.names=\"first\"))",
        "> ",
        "monkeystatus = df |>",
        "+ ",
        "  transmute(",
        "+ ",
        "    status = ifelse(b==\"a\",\"subordinate\",ifelse(b==\"b\",\"dominant\",\"adolescent\")),#cut(x,3,labels=letters[1:3]),",
        "+ ",
        "    difficulty = factor(x, labels=c(\"easy\",\"difficult\")),",
        "+ ",
        "    monkeyID = mnames[as.numeric(g)],",
        "+ ",
        "    probsolved = y_bin,",
        "+ ",
        "    probscore = round(scale(y)[,1]*10+50,1)",
        "+ ",
        "  ) |> filter(!(monkeyID==\"Richard\" & difficulty==\"easy\"),",
        "+ ",
        "              !(monkeyID==\"Nadheera\" & difficulty==\"difficult\"))",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "# library(lme4)",
        "> ",
        "m = glmer(probsolved ~ difficulty + status + (1+difficulty|monkeyID), monkeystatus, family=binomial)",
        "> ",
        "summary(m)",
        "Generalized linear mixed model fit by maximum likelihood (Laplace Approximation) ['glmerMod']\n Family: binomial  ( logit )\nFormula: probsolved ~ difficulty + status + (1 + difficulty | monkeyID)\n   Data: monkeystatus\n\n     AIC      BIC   logLik deviance df.resid \n   498.5    526.4   -242.2    484.5      390 \n\nScaled residuals: \n    Min      1Q  Median      3Q     Max \n-2.2585 -0.6254 -0.3296  0.6746  2.4990 \n\nRandom effects:\n Groups   Name                Variance Std.Dev. Corr \n monkeyID (Intercept)        ",
        " 1.446    1.202         \n          difficultydifficult 1.312    1.146    -0.42\nNumber of obs: 397, groups:  monkeyID, 50\n\nFixed effects:\n                    Estimate Std. Error z value Pr(>|z|)   \n(Intercept)          -0.3979     0.3796  -1.048  0.29457   \ndifficultydifficult  -0.8369     0.3031  -2.761  0.00576 **\nstatusdominant        0.6623     0.4631   1.430  0.15264   \nstatussubordinate     1.7800     0.5653   3.149  0.00164 **\n---\nSignif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1",
        "\n\nCorrelation of Fixed Effects:\n            (Intr) dffclt sttsdm\ndffcltydffc -0.332              \nstatusdmnnt -0.722 -0.030       \nstatssbrdnt -0.590 -0.036  0.494\n",
        "> ",
        "m1=glmer(probsolved ~ difficulty + (1+difficulty|monkeyID), monkeystatus, family=binomial)",
        "> ",
        "anova(m1,m)",
        "Data: monkeystatus\nModels:\nm1: probsolved ~ difficulty + (1 + difficulty | monkeyID)\nm: probsolved ~ difficulty + status + (1 + difficulty | monkeyID)\n   npar    AIC    BIC  logLik deviance  Chisq Df Pr(>Chisq)   \nm1    5 503.94 523.86 -246.97   493.94                        \nm     7 498.46 526.35 -242.23   484.46 9.4787  2   0.008744 **\n---\nSignif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1\n",
        "> ",
        "ss = 709233#round(runif(1,1e3,1e6))",
        "> ",
        "set.seed(ss)",
        "> ",
        "n_groups = 50",
        "> ",
        "# npgroup = round(runif(30,2,25))",
        "> ",
        "npgroup = round(runif(50, 5,11))",
        "> ",
        "g = unlist(sapply(1:n_groups, function(x) rep(x,npgroup[x])))",
        "> ",
        "N = length(g)",
        "> ",
        "x = sample(1:2,N,T)",
        "> ",
        "b = sample(letters[1:3],n_groups,T,prob=c(.3,.4,.3))",
        "> ",
        "b = b[g]",
        "> ",
        "res = MASS::mvrnorm(n=n_groups,",
        "+ ",
        "                    mu=c(0,0),Sigma=matrix(c(2,0,0,.6),nrow=2))",
        "> ",
        "re0 = res[,1]",
        "> ",
        "re  = re0[g]",
        "> ",
        "rex = res[,2]",
        "> ",
        "re_x  = rex[g]",
        "> ",
        "lp = (-.5 + re) - (.4 + re_x)*scale(x)[,1] + 1.4*(b==\"a\")",
        "> ",
        "y_bin = rbinom(N, size = 1, prob = plogis(lp))",
        "> ",
        "y = lp + rnorm(N,0,1.3)",
        "> ",
        "df = data.frame(x = x, g=factor(g), b=b,y_bin)",
        "> ",
        "mnames = unique(randomNames::randomNames(n_groups*4,which.names=\"first\"))",
        "> ",
        "monkeystatus = df |>",
        "+ ",
        "  transmute(",
        "+ ",
        "    status = ifelse(b==\"a\",\"subordinate\",ifelse(b==\"b\",\"dominant\",\"adolescent\")),#cut(x,3,labels=letters[1:3]),",
        "+ ",
        "    difficulty = factor(x, labels=c(\"easy\",\"difficult\")),",
        "+ ",
        "    monkeyID = mnames[as.numeric(g)],",
        "+ ",
        "    probsolved = y_bin,",
        "+ ",
        "    probscore = round(scale(y)[,1]*10+50,1)",
        "+ ",
        "  ) |> filter(!(monkeyID==\"Richard\" & difficulty==\"easy\"),",
        "+ ",
        "              !(monkeyID==\"Nadheera\" & difficulty==\"difficult\"))",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "# library(lme4)",
        "> ",
        "m = glmer(probsolved ~ difficulty + status + (1+difficulty|monkeyID), monkeystatus, family=binomial)",
        "> ",
        "summary(m)",
        "Generalized linear mixed model fit by maximum likelihood (Laplace Approximation) ['glmerMod']\n Family: binomial  ( logit )\nFormula: probsolved ~ difficulty + status + (1 + difficulty | monkeyID)\n   Data: monkeystatus\n\n     AIC      BIC   logLik deviance df.resid \n   503.7    531.6   -244.8    489.7      390 \n\nScaled residuals: \n    Min      1Q  Median      3Q     Max \n-1.9358 -0.6325 -0.3975  0.6748  2.5161 \n\nRandom effects:\n Groups   Name                Variance Std.Dev. Corr \n monkeyID (Intercept)        ",
        " 1.552    1.246         \n          difficultydifficult 1.371    1.171    -0.44\nNumber of obs: 397, groups:  monkeyID, 50\n\nFixed effects:\n                    Estimate Std. Error z value Pr(>|z|)   \n(Intercept)          -0.3945     0.3867  -1.020  0.30770   \ndifficultydifficult  -0.8586     0.3053  -2.812  0.00492 **\nstatusdominant        0.6682     0.4714   1.417  0.15637   \nstatussubordinate     1.4596     0.5692   2.564  0.01034 * \n---\nSignif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1",
        "\n\nCorrelation of Fixed Effects:\n            (Intr) dffclt sttsdm\ndffcltydffc -0.333              \nstatusdmnnt -0.721 -0.031       \nstatssbrdnt -0.594 -0.033  0.497\n",
        "> ",
        "m1=glmer(probsolved ~ difficulty + (1+difficulty|monkeyID), monkeystatus, family=binomial)",
        "> ",
        "anova(m1,m)",
        "Data: monkeystatus\nModels:\nm1: probsolved ~ difficulty + (1 + difficulty | monkeyID)\nm: probsolved ~ difficulty + status + (1 + difficulty | monkeyID)\n   npar    AIC    BIC  logLik deviance  Chisq Df Pr(>Chisq)  \nm1    5 506.13 526.05 -248.07   496.13                       \nm     7 503.70 531.58 -244.85   489.70 6.4367  2    0.04002 *\n---\nSignif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1\n",
        "> ",
        "lmer(probscore ~ 1 + difficulty + status +",
        "+ ",
        "               (1 + difficulty | monkeyID),",
        "+ ",
        "      data=monkeystatus) |> summary()",
        "Linear mixed model fit by REML ['lmerMod']\nFormula: probscore ~ 1 + difficulty + status + (1 + difficulty | monkeyID)\n   Data: monkeystatus\n\nREML criterion at convergence: 2720.8\n\nScaled residuals: \n     Min       1Q   Median       3Q      Max \n-2.60047 -0.62900  0.00504  0.59091  2.61239 \n\nRandom effects:\n Groups   Name                Variance Std.Dev. Corr \n monkeyID (Intercept)         42.63    6.529         \n          difficultydifficult 62.68    7.917    -0.49\n Residual                     37.66    6.137   ",
        "      \nNumber of obs: 397, groups:  monkeyID, 50\n\nFixed effects:\n                    Estimate Std. Error t value\n(Intercept)           49.344      1.638  30.115\ndifficultydifficult   -4.692      1.319  -3.558\nstatusdominant         1.812      2.007   0.903\nstatussubordinate      8.024      2.445   3.282\n\nCorrelation of Fixed Effects:\n            (Intr) dffclt sttsdm\ndffcltydffc -0.340              \nstatusdmnnt -0.721 -0.003       \nstatssbrdnt -0.591 -0.004  0.484\n",
        "> ",
        "library(tidyverse)",
        "> ",
        "library(lme4)",
        "> ",
        "# TODO",
        "> ",
        "monkeystat <- monkeystatus",
        "> ",
        "head(monkeystat)",
        "       status difficulty monkeyID probsolved probscore\n1 subordinate       easy Seunghoo          1      50.8\n2 subordinate       easy Seunghoo          0      47.2\n3 subordinate  difficult Seunghoo          0      29.1\n4 subordinate       easy Seunghoo          1      62.7\n5 subordinate  difficult Seunghoo          0      22.8\n6 subordinate       easy Seunghoo          1      67.4\n",
        "> ",
        "monkeystat |> ",
        "+ ",
        "  count(monkeyID) |> # count the monkeys!  ",
        "+ ",
        "  summary()",
        "   monkeyID               n        \n Length:50          Min.   : 3.00  \n Class :character   1st Qu.: 6.25  \n Mode  :character   Median : 8.00  \n                    Mean   : 7.94  \n                    3rd Qu.:10.00  \n                    Max.   :11.00  \n",
        "> ",
        "monkeystat |> ",
        "+ ",
        "  group_by(status) |> # group statuses",
        "+ ",
        "  summarise(",
        "+ ",
        "    # count the distinct monkeys",
        "+ ",
        "    nmonkey = n_distinct(monkeyID)",
        "+ ",
        "  ) ",
        "\u001B[38;5;246m# A tibble: 3 × 2\u001B[39m\n  status      nmonkey\n  \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m         \u001B[3m\u001B[38;5;246m<int>\u001B[39m\u001B[23m\n\u001B[38;5;250m1\u001B[39m adolescent       16\n\u001B[38;5;250m2\u001B[39m dominant         23\n\u001B[38;5;250m3\u001B[39m subordinate      11\n",
        "> ",
        "# which monkeys did what type of problems? ",
        "> ",
        "monkeystat |> count(status, monkeyID, difficulty) |>",
        "+ ",
        "  ggplot(aes(x=difficulty,y=n, fill=status))+",
        "+ ",
        "  geom_col()+",
        "+ ",
        "  facet_wrap(~monkeyID)",
        "> ",
        "# a quick look at proportions of problems solved:",
        "> ",
        "ggplot(monkeystat, aes(x=difficulty, y=probsolved,",
        "+ ",
        "                       col=status))+",
        "+ ",
        "  stat_summary(geom=\"pointrange\",size=1)+",
        "+ ",
        "  facet_wrap(~status)",
        "\u001B[38;5;254mNo summary function supplied, defaulting to `mean_se()`\u001B[39m\n\u001B[38;5;254mNo summary function supplied, defaulting to `mean_se()`\u001B[39m\n\u001B[38;5;254mNo summary function supplied, defaulting to `mean_se()`\u001B[39m\n",
        "> ",
        "mmod <- glmer(probsolved ~ difficulty + status + ",
        "+ ",
        "      (1 + difficulty | monkeyID),",
        "+ ",
        "      data = monkeystat, family = binomial)",
        "> ",
        "summary(mmod)",
        "Generalized linear mixed model fit by maximum likelihood (Laplace Approximation) ['glmerMod']\n Family: binomial  ( logit )\nFormula: probsolved ~ difficulty + status + (1 + difficulty | monkeyID)\n   Data: monkeystat\n\n     AIC      BIC   logLik deviance df.resid \n   503.7    531.6   -244.8    489.7      390 \n\nScaled residuals: \n    Min      1Q  Median      3Q     Max \n-1.9358 -0.6325 -0.3975  0.6748  2.5161 \n\nRandom effects:\n Groups   Name                Variance Std.Dev. Corr \n monkeyID (Intercept)         1.552   ",
        " 1.246         \n          difficultydifficult 1.371    1.171    -0.44\nNumber of obs: 397, groups:  monkeyID, 50\n\nFixed effects:\n                    Estimate Std. Error z value Pr(>|z|)   \n(Intercept)          -0.3945     0.3867  -1.020  0.30770   \ndifficultydifficult  -0.8586     0.3053  -2.812  0.00492 **\nstatusdominant        0.6682     0.4714   1.417  0.15637   \nstatussubordinate     1.4596     0.5692   2.564  0.01034 * \n---\nSignif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1",
        "\n\nCorrelation of Fixed Effects:\n            (Intr) dffclt sttsdm\ndffcltydffc -0.333              \nstatusdmnnt -0.721 -0.031       \nstatssbrdnt -0.594 -0.033  0.497\n",
        "> ",
        "mmod0 <- glmer(probsolved ~ difficulty + ",
        "+ ",
        "      (1 + difficulty | monkeyID),",
        "+ ",
        "      data = monkeystat, family = binomial)",
        "> ",
        "anova(mmod0, mmod)",
        "Data: monkeystat\nModels:\nmmod0: probsolved ~ difficulty + (1 + difficulty | monkeyID)\nmmod: probsolved ~ difficulty + status + (1 + difficulty | monkeyID)\n      npar    AIC    BIC  logLik deviance  Chisq Df Pr(>Chisq)  \nmmod0    5 506.13 526.05 -248.07   496.13                       \nmmod     7 503.70 531.58 -244.85   489.70 6.4367  2    0.04002 *\n---\nSignif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1\n",
        "> ",
        "library(effects)",
        "> ",
        "effect(term=c(\"status\",\"difficulty\"), mod=mmod) |>",
        "+ ",
        "  as.data.frame() |>",
        "+ ",
        "  ggplot(aes(x=difficulty, y=fit))+",
        "+ ",
        "  geom_pointrange(aes(ymin=lower,ymax=upper, col=status),",
        "+ ",
        "                  size=1, position=position_dodge(width=.3))",
        "NOTE: statusdifficulty does not appear in the model\n",
        "> ",
        "effect(term=c(\"status\",\"difficulty\"), mod=mmod) |>",
        "+ ",
        "  as.data.frame() |>",
        "+ ",
        "  ggplot(aes(x=difficulty, y=fit))+",
        "+ ",
        "  geom_pointrange(aes(ymin=lower,ymax=upper, col=status),",
        "+ ",
        "                  size=1, lwd=1,",
        "+ ",
        "                  position=position_dodge(width=.3))",
        "NOTE: statusdifficulty does not appear in the model\n",
        "> ",
        "dotplot.ranef.mer(ranef(mmod))",
        "$monkeyID\n\n",
        "> ",
        "exp(fixef(mmod))",
        "        (Intercept) difficultydifficult      statusdominant   statussubordinate \n          0.6740333           0.4237470           1.9506801           4.3043097 \n",
        "> ",
        "broom.mixed::tidy(mmod)",
        "\u001B[38;5;246m# A tibble: 7 × 7\u001B[39m\n  effect   group    term                                 estimate std.error statistic  p.value\n  \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m    \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m    \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m                                   \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m     \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m     \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m    \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m\n\u001B[38;5;250m1\u001B[39m fixed    \u001B[31mNA\u001B[39m       (Intercept)                            -\u001B[31m0\u001B[39m\u001B[31m.\u001B[39m\u001B[31m394\u001B[39m     0.387     -\u001B[31m1\u001B[39m\u001B[31m.\u001B[39m\u001B[31m0\u001B[39m\u001B[31m2\u001B[39m  0.308  \n",
        "\u001B[38;5;250m2\u001B[39m fixed    \u001B[31mNA\u001B[39m       difficultydifficult                    -\u001B[31m0\u001B[39m\u001B[31m.\u001B[39m\u001B[31m859\u001B[39m     0.305     -\u001B[31m2\u001B[39m\u001B[31m.\u001B[39m\u001B[31m81\u001B[39m  0.004\u001B[4m9\u001B[24m\u001B[4m2\u001B[24m\n\u001B[38;5;250m3\u001B[39m fixed    \u001B[31mNA\u001B[39m       statusdominant                          0.668     0.471      1.42  0.156  \n\u001B[38;5;250m4\u001B[39m fixed    \u001B[31mNA\u001B[39m       statussubordinate                       1.46      0.569      2.56  0.010\u001B[4m3\u001B[24m \n\u001B[38;5;250m5\u001B[39m ran_pars monkeyID sd__(Intercept)                         1.25     \u001B[31mNA\u001B[39m         \u001B[31mNA\u001B[39m    \u001B[31mNA\u001B[39m      \n",
        "\u001B[38;5;250m6\u001B[39m ran_pars monkeyID cor__(Intercept).difficultydifficult   -\u001B[31m0\u001B[39m\u001B[31m.\u001B[39m\u001B[31m442\u001B[39m    \u001B[31mNA\u001B[39m         \u001B[31mNA\u001B[39m    \u001B[31mNA\u001B[39m      \n\u001B[38;5;250m7\u001B[39m ran_pars monkeyID sd__difficultydifficult                 1.17     \u001B[31mNA\u001B[39m         \u001B[31mNA\u001B[39m    \u001B[31mNA\u001B[39m      \n",
        "> ",
        "broom.mixed::tidy(mmod) |>",
        "+ ",
        "  filter(effect==\"fixed\")",
        "\u001B[38;5;246m# A tibble: 4 × 7\u001B[39m\n  effect group term                estimate std.error statistic p.value\n  \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m  \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m                  \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m     \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m     \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m   \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m\n\u001B[38;5;250m1\u001B[39m fixed  \u001B[31mNA\u001B[39m    (Intercept)           -\u001B[31m0\u001B[39m\u001B[31m.\u001B[39m\u001B[31m394\u001B[39m     0.387     -\u001B[31m1\u001B[39m\u001B[31m.\u001B[39m\u001B[31m0\u001B[39m\u001B[31m2\u001B[39m 0.308  \n",
        "\u001B[38;5;250m2\u001B[39m fixed  \u001B[31mNA\u001B[39m    difficultydifficult   -\u001B[31m0\u001B[39m\u001B[31m.\u001B[39m\u001B[31m859\u001B[39m     0.305     -\u001B[31m2\u001B[39m\u001B[31m.\u001B[39m\u001B[31m81\u001B[39m 0.004\u001B[4m9\u001B[24m\u001B[4m2\u001B[24m\n\u001B[38;5;250m3\u001B[39m fixed  \u001B[31mNA\u001B[39m    statusdominant         0.668     0.471      1.42 0.156  \n\u001B[38;5;250m4\u001B[39m fixed  \u001B[31mNA\u001B[39m    statussubordinate      1.46      0.569      2.56 0.010\u001B[4m3\u001B[24m \n",
        "> ",
        "broom.mixed::tidy(mmod) |>",
        "+ ",
        "  filter(effect==\"fixed\") |>",
        "+ ",
        "  select(term, estimate)",
        "Error in select(filter(broom.mixed::tidy(mmod), effect == \"fixed\"), term,  : \n  unused arguments (term, estimate)\n",
        "> ",
        "broom.mixed::tidy(mmod) |>",
        "+ ",
        "  filter(effect==\"fixed\") |>",
        "+ ",
        "  transmute(",
        "+ ",
        "    term,",
        "+ ",
        "    est = round(estimate,2),",
        "+ ",
        "    OR = round(exp(estimate),2)",
        "+ ",
        "  )",
        "\u001B[38;5;246m# A tibble: 4 × 3\u001B[39m\n  term                  est    OR\n  \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m               \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m\n\u001B[38;5;250m1\u001B[39m (Intercept)         -\u001B[31m0\u001B[39m\u001B[31m.\u001B[39m\u001B[31m39\u001B[39m  0.67\n\u001B[38;5;250m2\u001B[39m difficultydifficult -\u001B[31m0\u001B[39m\u001B[31m.\u001B[39m\u001B[31m86\u001B[39m  0.42\n\u001B[38;5;250m3\u001B[39m statusdominant       0.67  1.95\n\u001B[38;5;250m4\u001B[39m statussubordinate    1.46  4.3 \n",
        "> ",
        "broom.mixed::tidy(mmod) |>",
        "+ ",
        "  filter(effect==\"fixed\") |>",
        "+ ",
        "  transmute(",
        "+ ",
        "    term,",
        "+ ",
        "    est = round(estimate,2),",
        "+ ",
        "    OR = round(exp(estimate),2),",
        "+ ",
        "    `OR interpretation` = c(",
        "+ ",
        "      \"estimated odds of an adolescent monkey solving an easy problem\",",
        "+ ",
        "      \"odds of successful problem solving are more than halved (0.42 times the odds) when a given monkey moves from an easy to a difficult problem\",",
        "+ ",
        "      \"odds of success would be almost doubled (1.95 times the odds) if a monkey were to change from adolescent to dominant status\",",
        "+ ",
        "      \"odds of success would quadruple (4.3 times the odds) if a monkey were to change from adolescent to subordinate status\"",
        "+ ",
        "    )",
        "+ ",
        "  ) |> gt::gt()",
        "> ",
        "confint(fixed(mmod))",
        "Error in as.character.default(x) : \n  no method for coercing this S4 class to a vector\n",
        "In addition: ",
        "Warning message:\n",
        "In fixed(mmod) :",
        " Coercing `pattern` to a plain character vector.\n",
        "> ",
        "confint(fixef(mmod))",
        "Error in object$coefficients : $ operator is invalid for atomic vectors\n",
        "> ",
        "confint(mmod)",
        "Computing profile confidence intervals ...\n",
        "> ",
        "confint(mmod)",
        "Computing profile confidence intervals ...\n",
        "Error in zeta(shiftpar, start = opt[seqpar1][-w]) : \n  profiling detected new, lower deviance (deviance diff = 8.67e-05, tolerance = 1e-09)\n",
        "> ",
        "?profile",
        "> ",
        "?profile.merMod",
        "> ",
        "?confint.merMod",
        "> ",
        "confint(mmod, maxpts=8)",
        "Computing profile confidence intervals ...\n",
        "Error in zeta(shiftpar, start = opt[seqpar1][-w]) : \n  profiling detected new, lower deviance (deviance diff = 8.67e-05, tolerance = 1e-09)\n",
        "> ",
        "pp <- profile(mmod)",
        "Error in zeta(shiftpar, start = opt[seqpar1][-w]) : \n  profiling detected new, lower deviance (deviance diff = 8.67e-05, tolerance = 1e-09)\n",
        "> ",
        "tpr <- profile(smod3)",
        "Error: object 'smod3' not found\n",
        "> ",
        "# Chunk 1: setup",
        "> ",
        "#| label: setup",
        "> ",
        "#| include: false",
        "> ",
        "source('assets/setup.R')",
        "> ",
        "library(xaringanExtra)",
        "> ",
        "library(tidyverse)",
        "> ",
        "library(patchwork)",
        "> ",
        "xaringanExtra::use_panelset()",
        "\n",
        "> ",
        "",
        "> ",
        "# Chunk 2: fig-se3",
        "> ",
        "#| echo: false",
        "> ",
        "#| label: fig-se3",
        "> ",
        "#| fig-cap: \"The standard error is the standard deviation of the 'sampling distribution' - the distribution of sample statistics that we _could_ see. We use this to ask how likely we are to see our observed sample in a universe where the null hypothesis is true. This probability gives us reason to reject (or not) said null hypothesis.\"",
        "> ",
        "#| fig-height: 3.5",
        "> ",
        "set.seed(2394)",
        "> ",
        "samplemeans <- seq(-5,5,.1)",
        "> ",
        "g <- ggplot(data=tibble(samplemeans),aes(x=samplemeans))+",
        "+ ",
        "  #geom_histogram(alpha=.3)+",
        "+ ",
        "  stat_function(geom=\"line\",fun=~dnorm(.x, mean=0,sd=1),lwd=1)",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "ld <- layer_data(g) |> filter(x <= 1 & x >= -1)",
        "> ",
        "ld2 <- layer_data(g) |> filter(x <= 2 & x >= -2)",
        "> ",
        "ld3 <- layer_data(g) |> filter(x >= 2.5)",
        "> ",
        "",
        "> ",
        "g + geom_area(data=ld,aes(x=x,y=y),fill=\"grey30\",alpha=.3) + ",
        "+ ",
        "  geom_area(data=ld2,aes(x=x,y=y),fill=\"grey30\",alpha=.1) +",
        "+ ",
        "  geom_area(data=ld3,aes(x=x,y=y),fill=\"red\",alpha=.1) +",
        "+ ",
        "  geom_vline(xintercept=2.5,col=\"red\")+",
        "+ ",
        "  annotate(\"text\",x=3,y=.3,label=\"observed\\nsample statistic\",col=\"red\",hjust=0,vjust=0)+",
        "+ ",
        "  geom_curve(aes(x=3, xend=2.5, y=.3, yend=.2), col=\"red\", size=0.5, ",
        "+ ",
        "             curvature = 0, arrow = arrow(length = unit(0.03, \"npc\")))+",
        "+ ",
        "  geom_vline(xintercept = 0, col=\"black\",lty=\"dashed\", lwd=.5) +",
        "+ ",
        "  annotate(\"text\",",
        "+ ",
        "           x=-2, y=.3, ",
        "+ ",
        "           label=\"Null Hypothesis\", col=\"black\",",
        "+ ",
        "           hjust=1)+",
        "+ ",
        "  geom_curve(aes(x=-2, xend=0, y=.3, yend=.3), col=\"black\", size=0.5, ",
        "+ ",
        "             curvature = 0, arrow = arrow(length = unit(0.03, \"npc\")))+",
        "+ ",
        "  ",
        "+ ",
        "  geom_segment(x=0,xend=-1,y=.15,yend=.15) +",
        "+ ",
        "  annotate(\"text\",x=-3.5, y=.16, label=\"Standard Error (SE)\\n(standard deviation of\\nsampling distribution)\", col=\"grey30\")+",
        "+ ",
        "  geom_curve(aes(x=-2.3, xend=-.5, y=.2, yend=.15), col=\"grey30\", size=0.5, curvature = -0.3, arrow = arrow(length = unit(0.03, \"npc\")))+",
        "+ ",
        "",
        "+ ",
        "  scale_y_continuous(NULL,breaks=NULL)+",
        "+ ",
        "  theme_minimal()+",
        "+ ",
        "  scale_x_continuous(\"sample means under the null hypothesis\",breaks=NULL) ",
        "Warning message:\n",
        "\u001B[38;5;254mUsing `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\n\u001B[36mℹ\u001B[38;5;254m Please use `linewidth` instead.\n\u001B[90mThis warning is displayed once every 8 hours.\u001B[38;5;254m\n\u001B[90mCall `lifecycle::last_lifecycle_warnings()` to see where this warning was generated.\u001B[38;5;254m\u001B[39m \n",
        "> ",
        "  ",
        "> ",
        "  ",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "# Chunk 3",
        "> ",
        "library(tidyverse)",
        "> ",
        "library(lme4)",
        "> ",
        "",
        "> ",
        "schoolmot <- read_csv(\"https://uoepsy.github.io/data/schoolmot.csv\")",
        "\r\u001B[1mindexed\u001B[0m \u001B[32m0B\u001B[0m in \u001B[36m 0s\u001B[0m, \u001B[32m0B/s\u001B[0m\r\u001B[1mindexed\u001B[0m \u001B[32m2.15GB\u001B[0m in \u001B[36m 0s\u001B[0m, \u001B[32m2.15GB/s\u001B[0m\r                                                                                                  \r\u001B[1mRows: \u001B[22m\u001B[34m900\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m4\u001B[39m\n\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────────────────────────\u001B[39m\n\u001B[1mDelimiter:\u001B[22m \",\"\n\u001B[31mchr\u001B[39m (2): funding, schoolid\n\u001B[32mdbl\u001B[39m (2): motiv, grade\n",
        "\n\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n",
        "> ",
        "",
        "> ",
        "smod3 <- lmer(grade ~ motiv * funding + (1 + motiv | schoolid), ",
        "+ ",
        "              data = schoolmot)",
        "> ",
        "",
        "> ",
        "# Chunk 4",
        "> ",
        "smod3sat <- lmerTest::lmer(grade ~ motiv * funding + ",
        "+ ",
        "                (1 + motiv | schoolid), ",
        "+ ",
        "              data = schoolmot)",
        "> ",
        "summary(smod3sat)",
        "Linear mixed model fit by REML. t-tests use Satterthwaite's method ['lmerModLmerTest']\nFormula: grade ~ motiv * funding + (1 + motiv | schoolid)\n   Data: schoolmot\n\nREML criterion at convergence: 7083.6\n\nScaled residuals: \n     Min       1Q   Median       3Q      Max \n-3.08250 -0.67269  0.03043  0.63562  3.13012 \n\nRandom effects:\n Groups   Name        Variance Std.Dev. Corr \n schoolid (Intercept) 105.124  10.253        \n          motiv         2.595   1.611   -0.48\n Residual             139.030  11.791        ",
        "\nNumber of obs: 900, groups:  schoolid, 30\n\nFixed effects:\n                   Estimate Std. Error       df t value Pr(>|t|)    \n(Intercept)         40.3143     4.6414  26.7240   8.686  2.9e-09 ***\nmotiv                2.6294     0.8652  28.5939   3.039  0.00503 ** \nfundingstate       -17.2531     5.7346  25.5625  -3.009  0.00583 ** \nmotiv:fundingstate   2.8485     1.0591  26.5413   2.689  0.01221 *  \n---\nSignif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1\n\nCorrelation of Fixed Effects:\n",
        "            (Intr) motiv  fndngs\nmotiv       -0.782              \nfundingstat -0.809  0.633       \nmtv:fndngst  0.639 -0.817 -0.773\n",
        "> ",
        "",
        "> ",
        "# Chunk 5",
        "> ",
        "smod3 <- lmer(grade ~ motiv * funding + (1 + motiv | schoolid), ",
        "+ ",
        "              data = schoolmot)",
        "> ",
        "smod3_res <- lmer(grade ~ motiv + funding + (1 + motiv | schoolid), ",
        "+ ",
        "              data = schoolmot)",
        "> ",
        "library(pbkrtest)",
        "> ",
        "SATmodcomp(largeModel = smod3, smallModel = smod3_res)",
        "large : grade ~ motiv * funding + (1 + motiv | schoolid)\nsmall (restriction matrix) : \n        \n 0 0 0 1\n     statistic    ndf    ddf p.value  \n[1,]    7.2332 1.0000 26.541 0.01221 *\n---\nSignif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1\n",
        "> ",
        "",
        "> ",
        "# Chunk 6",
        "> ",
        "library(parameters)",
        "\nAttaching package: ‘parameters’\n\n",
        "The following object is masked from ‘package:arm’:\n\n    display\n\n",
        "Warning message:\n",
        "package ‘parameters’ was built under R version 4.3.2 \n",
        "> ",
        "model_parameters(smod3, ci_method=\"kr\")",
        "\u001B[34m# Fixed Effects \u001B[39m\n\nParameter               | Coefficient |   SE |          95% CI |     t |    df |      p\n---------------------------------------------------------------------------------------\n(Intercept)             |       40.31 | 4.68 | [ 30.72, 49.90] |  8.61 | 28.43 | < .001\nmotiv                   |        2.63 | 0.87 | [  0.85,  4.41] |  3.01 | 31.05 | 0.005 \nfunding [state]         |      -17.25 | 5.78 | [-29.11, -5.39] | -2.98 | 27.19 | 0.006 \nmotiv × funding [state] |        2.85 | 1.07 | [  0.66,  5.03] |  2.67 | 28.79 | 0.012 \n\n\u001B[34m# Random Effects \u001B[39m\n\nParameter                       | Coefficient\n---------------------------------------------\nSD (Intercept: schoolid)        |       10.25\nSD (motiv: schoolid)            |        1.61\nCor (Intercept~motiv: schoolid) |       -0.48\nSD (Residual)                   |       11.79\n",
        "\nUncertainty intervals (equal-tailed) and p-values (two-tailed) computed using a Wald\n  t-distribution with Kenward-Roger approximation. Uncertainty intervals for random effect\n  variances computed using a Wald z-distribution approximation.\n",
        "> ",
        "",
        "> ",
        "# Chunk 7",
        "> ",
        "smod3 <- lmer(grade ~ motiv * funding + (1 + motiv | schoolid), ",
        "+ ",
        "              data = schoolmot, REML=TRUE)",
        "> ",
        "smod3_res <- lmer(grade ~ motiv + funding + (1 + motiv | schoolid), ",
        "+ ",
        "              data = schoolmot, REML=TRUE)",
        "> ",
        "library(pbkrtest)",
        "> ",
        "KRmodcomp(largeModel = smod3, smallModel = smod3_res)",
        "large : grade ~ motiv * funding + (1 + motiv | schoolid)\nsmall : grade ~ motiv + funding + (1 + motiv | schoolid)\n         stat     ndf     ddf F.scaling p.value  \nFtest  7.1147  1.0000 28.7941         1 0.01241 *\n---\nSignif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1\n",
        "> ",
        "",
        "> ",
        "# Chunk 8: fig-mlee",
        "> ",
        "#| label: fig-mlee",
        "> ",
        "#| fig-cap: \"likelihood is the probability of observing the data, given some model\"",
        "> ",
        "#| out-height: \"200px\"",
        "> ",
        "#| out-wight: \"200px\"",
        "> ",
        "#| echo: false",
        "> ",
        "knitr::include_graphics(\"images/mle_single.png\")",
        "[1] \"images/mle_single.png\"\nattr(,\"class\")\n[1] \"knit_image_paths\" \"knit_asis\"       \n",
        "> ",
        "",
        "> ",
        "# Chunk 9",
        "> ",
        "smod3 <- lmer(grade ~ motiv * funding + (1 + motiv | schoolid), ",
        "+ ",
        "              data = schoolmot, REML = FALSE)",
        "Warning message:\n",
        "In checkConv(attr(opt, \"derivs\"), opt$par, ctrl = control$checkConv,  :",
        "\n ",
        " Model failed to converge with max|grad| = 0.0042767 (tol = 0.002, component 1)\n",
        "> ",
        "smod3_res <- lmer(grade ~ motiv + funding + (1 + motiv | schoolid), ",
        "+ ",
        "              data = schoolmot, REML = FALSE)",
        "> ",
        "anova(smod3_res, smod3) # a likelihood ratio test!",
        "Data: schoolmot\nModels:\nsmod3_res: grade ~ motiv + funding + (1 + motiv | schoolid)\nsmod3: grade ~ motiv * funding + (1 + motiv | schoolid)\n          npar    AIC    BIC  logLik deviance  Chisq Df Pr(>Chisq)   \nsmod3_res    7 7114.1 7147.7 -3550.0   7100.1                        \nsmod3        8 7109.2 7147.7 -3546.6   7093.2 6.8417  1   0.008905 **\n---\nSignif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1\n",
        "> ",
        "tpr <- profile(smod3)",
        "There were 50 or more warnings (use warnings() to see the first 50)",
        "\n",
        "> ",
        "confint(tpr)",
        "                         2.5 %    97.5 %\n.sig01               3.9789910 15.676936\n.sig02              -1.0000000  1.000000\n.sig03               0.0000000  2.698323\n.sigma              11.2516781 12.387166\n(Intercept)         31.3570545 49.522410\nmotiv                0.9403609  4.310786\nfundingstate       -28.6168996 -6.067518\nmotiv:fundingstate   0.7521944  4.896439\n",
        "Warning messages:\n",
        "1: ",
        "In confint.thpr(tpr) :",
        "\n ",
        " bad spline fit for .sig02: falling back to linear interpolation\n",
        "2: ",
        "In regularize.values(x, y, ties, missing(ties), na.rm = na.rm) :",
        "\n ",
        " collapsing to unique 'x' values\n",
        "> ",
        "confint(mmod, method=\"boot\")",
        "Computing bootstrap confidence intervals ...\n",
        "> ",
        "confint(mmod, which=\"beta_\")",
        "Computing profile confidence intervals ...\n",
        "Error in profile.merMod(object, which = parm, signames = oldNames, ...) : \n  formal argument \"which\" matched by multiple actual arguments\n",
        "> ",
        "confint(mmod, parm=\"beta_\")",
        "Computing profile confidence intervals ...\n",
        "Error in zeta(shiftpar, start = opt[seqpar1][-w]) : \n  profiling detected new, lower deviance (deviance diff = 0.000169, tolerance = 1e-09)\n",
        "> ",
        "cbind(fixef(mmod),",
        "+ ",
        "      confint(mmod, parm=\"beta_\",",
        "+ ",
        "              non.mono.tol=1e-10))",
        "Computing profile confidence intervals ...\n",
        "Error in profnames(fm, useSc = useSc, ...) : \n  unused argument (non.mono.tol = 1e-10)\n",
        "> ",
        "tpr <- profile(mmod,devtol=1e-4)",
        "There were 50 or more warnings (use warnings() to see the first 50)",
        "\n",
        "> ",
        "mci = confint(mmod, method=\"boot\")",
        "Computing bootstrap confidence intervals ...\n",
        "> ",
        "> ",
        "mci",
        "Error: object 'mci' not found\n",
        "> ",
        "confint(mmod, method=\"wald\")",
        "Error in match.arg(method) : \n  'arg' should be one of “profile”, “Wald”, “boot”\n",
        "> ",
        "confint(mmod, method=\"Wald\")",
        "                         2.5 %     97.5 %\n.sig01                      NA         NA\n.sig02                      NA         NA\n.sig03                      NA         NA\n(Intercept)         -1.1524317  0.3634802\ndifficultydifficult -1.4570611 -0.2601764\nstatusdominant      -0.2557865  1.5921427\nstatussubordinate    0.3440409  2.5751927\n",
        "> ",
        "confint(mmod, method=\"Wald\", parm=\"beta_\")",
        "                         2.5 %     97.5 %\n(Intercept)         -1.1524317  0.3634802\ndifficultydifficult -1.4570611 -0.2601764\nstatusdominant      -0.2557865  1.5921427\nstatussubordinate    0.3440409  2.5751927\n",
        "> ",
        "cbind(",
        "+ ",
        "  fixef(mmod), # the fixed effects",
        "+ ",
        "  confint(mmod, method=\"Wald\", parm=\"beta_\") # Wald CIs for fixed effects",
        "+ ",
        ")",
        "                                    2.5 %     97.5 %\n(Intercept)         -0.3944758 -1.1524317  0.3634802\ndifficultydifficult -0.8586188 -1.4570611 -0.2601764\nstatusdominant       0.6681781 -0.2557865  1.5921427\nstatussubordinate    1.4596168  0.3440409  2.5751927\n",
        "> ",
        "cbind(",
        "+ ",
        "  fixef(mmod), # the fixed effects",
        "+ ",
        "  confint(mmod, method=\"Wald\", parm=\"beta_\") # Wald CIs for fixed effects",
        "+ ",
        ") |>",
        "+ ",
        "  exp()",
        "                                  2.5 %     97.5 %\n(Intercept)         0.6740333 0.3158677  1.4383264\ndifficultydifficult 0.4237470 0.2329198  0.7709156\nstatusdominant      1.9506801 0.7743073  4.9142675\nstatussubordinate   4.3043097 1.4106363 13.1338476\n",
        "> ",
        "file.edit(\"../../junk/R/uoepsy_cols.R\")",
        "> ",
        "library(effects)",
        "> ",
        "effect(term=c(\"status\",\"difficulty\"), mod=mmod) |>",
        "+ ",
        "  as.data.frame() |>",
        "+ ",
        "  ggplot(aes(x=difficulty, y=fit))+",
        "+ ",
        "  geom_pointrange(aes(ymin=lower,ymax=upper, col=status),",
        "+ ",
        "                  size=1, lwd=1,",
        "+ ",
        "                  position=position_dodge(width=.3)) +",
        "+ ",
        "  labs(x = \"problem difficulty\", y = \"predicted probability\")",
        "NOTE: statusdifficulty does not appear in the model\n",
        "> ",
        "ggplot(monkeystat, aes(x=difficulty, y=probsolved,",
        "+ ",
        "                       col=status))+",
        "+ ",
        "  stat_summary(geom=\"pointrange\",size=1, aes(group=monkeyID))",
        "\u001B[38;5;254mNo summary function supplied, defaulting to `mean_se()`\u001B[39m\n",
        "Warning message:\n",
        "\u001B[38;5;254mRemoved 6 rows containing missing values (`geom_segment()`).\u001B[39m \n",
        "> ",
        "# a quick look at proportions of problems solved:",
        "> ",
        "ggplot(monkeystat, aes(x=difficulty, y=probsolved,",
        "+ ",
        "                       col=status))+",
        "+ ",
        "  stat_summary(geom=\"pointrange\",size=1, aes(group=monkeyID))+",
        "+ ",
        "  facet_wrap(~status)",
        "\u001B[38;5;254mNo summary function supplied, defaulting to `mean_se()`\u001B[39m\n\u001B[38;5;254mNo summary function supplied, defaulting to `mean_se()`\u001B[39m\n\u001B[38;5;254mNo summary function supplied, defaulting to `mean_se()`\u001B[39m\n",
        "Warning messages:\n",
        "1: \u001B[38;5;254mRemoved 2 rows containing missing values (`geom_segment()`).\u001B[39m \n",
        "2: \u001B[38;5;254mRemoved 3 rows containing missing values (`geom_segment()`).\u001B[39m \n",
        "3: \u001B[38;5;254mRemoved 1 rows containing missing values (`geom_segment()`).\u001B[39m \n",
        "> ",
        "#| out-width: \"100%\"",
        "> ",
        "# which monkeys did what type of problems? ",
        "> ",
        "monkeystat |> count(status, monkeyID, difficulty) |>",
        "+ ",
        "  ggplot(aes(x=difficulty,y=n, fill=status))+",
        "+ ",
        "  geom_col()+",
        "+ ",
        "  facet_wrap(~monkeyID) +",
        "+ ",
        "  theme(legend.position = \"bottom\",",
        "+ ",
        "        axis.text.x = element_text(angle=60))",
        "> ",
        "#| out-width: \"100%\"",
        "> ",
        "# which monkeys did what type of problems? ",
        "> ",
        "monkeystat |> count(status, monkeyID, difficulty) |>",
        "+ ",
        "  ggplot(aes(x=difficulty,y=n, fill=status))+",
        "+ ",
        "  geom_col()+",
        "+ ",
        "  facet_wrap(~monkeyID) +",
        "+ ",
        "  scale_x_discrete(labels=abbreviate()) + ",
        "+ ",
        "  theme(legend.position = \"bottom\")",
        "Error in abbreviate() : argument \"names.arg\" is missing, with no default\n",
        "> ",
        "?abbrev",
        "No documentation for ‘abbrev’ in specified packages and libraries:\nyou could try ‘??abbrev’\n",
        "> ",
        "?abbreviate",
        "> ",
        "#| out-width: \"100%\"",
        "> ",
        "# which monkeys did what type of problems? ",
        "> ",
        "monkeystat |> count(status, monkeyID, difficulty) |>",
        "+ ",
        "  ggplot(aes(x=difficulty,y=n, fill=status))+",
        "+ ",
        "  geom_col()+",
        "+ ",
        "  facet_wrap(~monkeyID) +",
        "+ ",
        "  scale_x_discrete(labels=abbreviate) + ",
        "+ ",
        "  theme(legend.position = \"bottom\")",
        "> ",
        "#| out-width: \"100%\"",
        "> ",
        "# which monkeys did what type of problems? ",
        "> ",
        "monkeystat |> count(status, monkeyID, difficulty) |>",
        "+ ",
        "  ggplot(aes(x=difficulty,y=n, fill=status))+",
        "+ ",
        "  geom_col()+",
        "+ ",
        "  facet_wrap(~monkeyID) +",
        "+ ",
        "  scale_x_discrete(NULL,labels=abbreviate) + ",
        "+ ",
        "  theme(legend.position = \"bottom\")",
        "> ",
        "#| out-width: \"100%\"",
        "> ",
        "# which monkeys did what type of problems? ",
        "> ",
        "monkeystat |> count(status, monkeyID, difficulty) |>",
        "+ ",
        "  ggplot(aes(x=difficulty,y=n, fill=status))+",
        "+ ",
        "  geom_col()+",
        "+ ",
        "  facet_wrap(~monkeyID) +",
        "+ ",
        "  scale_x_discrete(labels=abbreviate)",
        "> ",
        "mmod0 <- glmer(probsolved ~ difficulty + ",
        "+ ",
        "      (1 + difficulty | monkeyID),",
        "+ ",
        "      data = mstat, family = binomial)",
        "Error: bad 'data': object 'mstat' not found\n",
        "> ",
        "# Chunk 1: setup",
        "> ",
        "#| label: setup",
        "> ",
        "#| include: false",
        "> ",
        "source('assets/setup.R')",
        "> ",
        "library(xaringanExtra)",
        "> ",
        "library(tidyverse)",
        "> ",
        "library(patchwork)",
        "> ",
        "xaringanExtra::use_panelset()",
        "\n",
        "> ",
        "",
        "> ",
        "# Chunk 2",
        "> ",
        "#| echo: false",
        "> ",
        "ss = 709233#round(runif(1,1e3,1e6))",
        "> ",
        "set.seed(ss)",
        "> ",
        "n_groups = 50",
        "> ",
        "# npgroup = round(runif(30,2,25))",
        "> ",
        "npgroup = round(runif(50, 5,11))",
        "> ",
        "g = unlist(sapply(1:n_groups, function(x) rep(x,npgroup[x])))",
        "> ",
        "N = length(g)",
        "> ",
        "x = sample(1:2,N,T)",
        "> ",
        "b = sample(letters[1:3],n_groups,T,prob=c(.3,.4,.3))",
        "> ",
        "b = b[g]",
        "> ",
        "res = MASS::mvrnorm(n=n_groups,",
        "+ ",
        "                    mu=c(0,0),Sigma=matrix(c(2,0,0,.6),nrow=2))",
        "> ",
        "re0 = res[,1]",
        "> ",
        "re  = re0[g]",
        "> ",
        "rex = res[,2]",
        "> ",
        "re_x  = rex[g]",
        "> ",
        "lp = (-.5 + re) - (.4 + re_x)*scale(x)[,1] + 1.4*(b==\"a\")",
        "> ",
        "y_bin = rbinom(N, size = 1, prob = plogis(lp))",
        "> ",
        "y = lp + rnorm(N,0,1.3)",
        "> ",
        "df = data.frame(x = x, g=factor(g), b=b,y_bin)",
        "> ",
        "mnames = unique(randomNames::randomNames(n_groups*4,which.names=\"first\"))",
        "> ",
        "monkeystatus = df |>",
        "+ ",
        "  transmute(",
        "+ ",
        "    status = ifelse(b==\"a\",\"subordinate\",ifelse(b==\"b\",\"dominant\",\"adolescent\")),#cut(x,3,labels=letters[1:3]),",
        "+ ",
        "    difficulty = factor(x, labels=c(\"easy\",\"difficult\")),",
        "+ ",
        "    monkeyID = mnames[as.numeric(g)],",
        "+ ",
        "    solved = y_bin,",
        "+ ",
        "    score = round(scale(y)[,1]*10+50,1)",
        "+ ",
        "  ) |> filter(!(monkeyID==\"Richard\" & difficulty==\"easy\"),",
        "+ ",
        "              !(monkeyID==\"Nadheera\" & difficulty==\"difficult\"))",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "# library(lme4)",
        "> ",
        "# m = glmer(probsolved ~ difficulty + status + (1+difficulty|monkeyID), monkeystatus, family=binomial)",
        "> ",
        "# summary(m)",
        "> ",
        "# ",
        "> ",
        "# m1=glmer(probsolved ~ difficulty + (1+difficulty|monkeyID), monkeystatus, family=binomial)",
        "> ",
        "# anova(m1,m)",
        "> ",
        "# ",
        "> ",
        "# lmer(probscore ~ 1 + difficulty + status +",
        "> ",
        "#                (1 + difficulty | monkeyID),",
        "> ",
        "#       data=monkeystatus) |> summary()",
        "> ",
        "write_csv(monkeystatus |> select(-score),",
        "+ ",
        "          file=\"../../data/msmr_monkeystatus.csv\")",
        "Error in select(monkeystatus, -score) : unused argument (-score)\n",
        "> ",
        "# Chunk 1: setup",
        "> ",
        "#| label: setup",
        "> ",
        "#| include: false",
        "> ",
        "source('assets/setup.R')",
        "> ",
        "library(xaringanExtra)",
        "> ",
        "library(tidyverse)",
        "> ",
        "library(patchwork)",
        "> ",
        "xaringanExtra::use_panelset()",
        "\n",
        "> ",
        "#| echo: false",
        "> ",
        "ss = 709233#round(runif(1,1e3,1e6))",
        "> ",
        "set.seed(ss)",
        "> ",
        "n_groups = 50",
        "> ",
        "# npgroup = round(runif(30,2,25))",
        "> ",
        "npgroup = round(runif(50, 5,11))",
        "> ",
        "g = unlist(sapply(1:n_groups, function(x) rep(x,npgroup[x])))",
        "> ",
        "N = length(g)",
        "> ",
        "x = sample(1:2,N,T)",
        "> ",
        "b = sample(letters[1:3],n_groups,T,prob=c(.3,.4,.3))",
        "> ",
        "b = b[g]",
        "> ",
        "res = MASS::mvrnorm(n=n_groups,",
        "+ ",
        "                    mu=c(0,0),Sigma=matrix(c(2,0,0,.6),nrow=2))",
        "> ",
        "re0 = res[,1]",
        "> ",
        "re  = re0[g]",
        "> ",
        "rex = res[,2]",
        "> ",
        "re_x  = rex[g]",
        "> ",
        "lp = (-.5 + re) - (.4 + re_x)*scale(x)[,1] + 1.4*(b==\"a\")",
        "> ",
        "y_bin = rbinom(N, size = 1, prob = plogis(lp))",
        "> ",
        "y = lp + rnorm(N,0,1.3)",
        "> ",
        "df = data.frame(x = x, g=factor(g), b=b,y_bin)",
        "> ",
        "mnames = unique(randomNames::randomNames(n_groups*4,which.names=\"first\"))",
        "> ",
        "monkeystatus = df |>",
        "+ ",
        "  transmute(",
        "+ ",
        "    status = ifelse(b==\"a\",\"subordinate\",ifelse(b==\"b\",\"dominant\",\"adolescent\")),#cut(x,3,labels=letters[1:3]),",
        "+ ",
        "    difficulty = factor(x, labels=c(\"easy\",\"difficult\")),",
        "+ ",
        "    monkeyID = mnames[as.numeric(g)],",
        "+ ",
        "    solved = y_bin,",
        "+ ",
        "    score = round(scale(y)[,1]*10+50,1)",
        "+ ",
        "  ) |> filter(!(monkeyID==\"Richard\" & difficulty==\"easy\"),",
        "+ ",
        "              !(monkeyID==\"Nadheera\" & difficulty==\"difficult\"))",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "# library(lme4)",
        "> ",
        "# m = glmer(probsolved ~ difficulty + status + (1+difficulty|monkeyID), monkeystatus, family=binomial)",
        "> ",
        "# summary(m)",
        "> ",
        "# ",
        "> ",
        "# m1=glmer(probsolved ~ difficulty + (1+difficulty|monkeyID), monkeystatus, family=binomial)",
        "> ",
        "# anova(m1,m)",
        "> ",
        "# ",
        "> ",
        "# lmer(probscore ~ 1 + difficulty + status +",
        "> ",
        "#                (1 + difficulty | monkeyID),",
        "> ",
        "#       data=monkeystatus) |> summary()",
        "> ",
        "write_csv(monkeystatus |> select(-score),",
        "+ ",
        "          file=\"../../data/msmr_monkeystatus.csv\")",
        "Error in select(monkeystatus, -score) : unused argument (-score)\n",
        "\nRestarting R session...\n\n"
    ]
}