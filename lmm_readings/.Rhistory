summary(mod2)
# if you want to see a cross-level interaction (not relevant for RQ):
mod2 <- lmer(lifesat ~ 1 + age * size + (1  | dwelling), df)
# if you want to see a cross-level interaction (not relevant for RQ):
mod2 <- lmer(lifesat ~ 1 + age * size + (1 + age | dwelling), df)
# if you want to see a cross-level interaction (not relevant for RQ):
df$age <- df$age/10 # makes fitting easier
mod2 <- lmer(lifesat ~ 1 + age * size + (1 + age | dwelling), df)
df <- read_csv("https://uoepsy.github.io/data/lmm_jsup.csv")
df <- read_csv("https://uoepsy.github.io/data/lmm_jsup.csv")
mod <- lmer(wp ~ employment_length + role + (1 + role | dept), df)
# either Roles or Seniority would work here:
mod <- lmer(wp ~ employment_length + seniority + (1 + seniority | dept), df)
mod <- lmer(wp ~ employment_length + role + (1 + role | dept), df)
mod <- lmer(wp ~ employment_length + role + (1 | dept), df)
df <- read_csv("https://uoepsy.github.io/data/toy2.csv")
# Chunk 1: setup
#| label: setup
#| include: false
source('assets/setup.R')
library(xaringanExtra)
library(tidyverse)
library(patchwork)
library(ggdist)
xaringanExtra::use_panelset()
qcounter <- function(){
if(!exists("qcounter_i")){
qcounter_i <<- 1
}else{
qcounter_i <<- qcounter_i + 1
}
qcounter_i
}
library(lme4)
# Chunk 2
#| echo: false
tibble(variable=names(read_csv("https://uoepsy.github.io/data/schoolmot.csv")),
description = c(
"Child's Education Motivation Score (range 0 - 10)",
"Funding ('state' or 'private')",
"Name of School that the child attends",
"Child's end-of-year grade average (0-100)")
) |> gt::gt()
# Chunk 4
#| echo: false
df <- read_csv("https://uoepsy.github.io/data/lmm_lifesatscot.csv")
tibble(
variable = names(df),
description = c("Age (years)","Life Satisfaction score","Dwelling (town/city in Scotland)","Size of Dwelling (> or <100k people)")
) |> gt::gt()
# Chunk 6
#| echo: false
jsup <- read_csv("https://uoepsy.github.io/data/lmm_jsup.csv")
tibble(
variable = names(jsup),
description = c(
"Name of government department",
"Department Acronym",
"Whether the department functions as hybrid department with various employees working remotely (1), or as a fully in-person office (0)",
"Employee role (A, B or C)",
"Employees seniority point. These map to roles, such that role A is 0-4, role B is 5-9, role C is 10-14. Higher numbers indicate more seniority",
"Length of employment in the department (years)",
"Composite Measure of 'Workplace Pride'")
) |> gt::gt()
# Chunk 8
#| echo: false
load(url("https://uoepsy.github.io/data/wellbeingwork3.rda"))
d3 <- wellbeingwork3
tibble(variable=names(d3),
description = c(
"Participant ID",
"Timepoint (0 = baseline, 1 = 12 months, 2 = 24 months, 3 = 36 months)",
"Employment Condition ('control' = 5 day week, 28 days of leave. 'unlimited_leave' = 5 days a week, unlimited leave. 'fourday_week' = 4 day week, 28 days of leave)",
"Wellbeing score (Warwick Edinburgh Mental Wellbeing Scale). Range 15 - 75, with higher scores indicating better mental wellbeing")
) %>% gt::gt()
# Chunk 10
library(gt)
tibble(variable=names(read_csv("https://uoepsy.github.io/data/toy2.csv")),
description=c("Type of Toy","Year Released","Character","Hours of practice per week","Reading Age")
) %>% gt::gt()
df <- read_csv("https://uoepsy.github.io/data/toy2.csv")
#| eval: false
df <- read_csv("https://uoepsy.github.io/data/stressint.csv")
df$time <- factor(df$time, levels=c("Pre","During","Post"))
#| eval: false
#| error: true
#| warning: true
#| message: true
mod1 <- lmer(stress ~ time*group +
(1 + time|ppt),
data = df)
df<-read_csv("https://uoepsy.github.io/data/msmr_nssjobsat.csv")
mod <- lmer(jobsat ~ 1 + payscale + (1 + payscale | dept), df)
dfape1 <- read_csv("https://uoepsy.github.io/data/lmm_apespecies.csv")
dfape2 <- read_csv("https://uoepsy.github.io/data/lmm_apeage.csv")
head(dfape1)
head(dfape2)
df <- full_join(dfape1, dfape2)
mod <- lmer(dominance ~ age * species + (1 + age | ape), df)
dfape1 <- read_csv("https://uoepsy.github.io/data/lmm_apespecies.csv")
dfape2 <- read_csv("https://uoepsy.github.io/data/lmm_apeage.csv")
df <- full_join(dfape1, dfape2)
mod <- lmer(dominance ~ age * species + (1 + age | ape), df)
mod.rstr <- lmer(dominance ~ age + species + (1 + age | ape), df)
anova(mod.rstr, mod)
#| eval: false
dfape1 <- read_csv("https://uoepsy.github.io/data/lmm_apespecies.csv")
dfape2 <- read_csv("https://uoepsy.github.io/data/lmm_apeage.csv")
df <- full_join(dfape1, dfape2)
#| eval: false
df <- df |>
mutate(
# fix species typos
species = case_when(
species %in% c("chimp","chimpanzee") ~ "chimp",
species %in% c("gorilla","gorrila") ~ "gorilla",
TRUE ~ species
)
) |>
filter(
# get rid of ages -99
age > 0,
# keep when dominance is between -5 and 5
# (5 here is a slightly arbitrary choice, but you can see from
# our checks that this will only exclude the two extreme datapoints
# that are 21.2 and 19.4
(dominance < 5 & dominance > -5)
)
#| eval: false
mod <- lmer(dominance ~ age * species + (1 + age | ape), df)
mod.rstr <- lmer(dominance ~ age + species + (1 + age | ape), df)
anova(mod.rstr, mod)
df <- read_csv("https://uoepsy.github.io/data/lmm_mindfuldeclineFULL.csv")
mod <- lmer(ACE ~ 1 + ageC * condition +
( 1 + ageC * condition | sitename) +
(1 + ageC | sitename:ppt),
data = df)
df$ageC <- df$age-60
mod <- lmer(ACE ~ 1 + ageC * condition +
( 1 + ageC * condition | sitename) +
(1 + ageC | sitename:ppt),
data = df)
mod <- lmer(ACE ~ 1 + ageC * condition +
( 1 + ageC + condition | sitename) +
(1 + ageC | sitename:ppt),
data = df)
# probably simplify to
mod <- lmer(ACE ~ 1 + ageC * condition +
( 1 + ageC | sitename) +
(1 + ageC | sitename:ppt),
data = df)
df <- read_csv("https://uoepsy.github.io/data/lmm_gadeduc.csv")
df <- df |>
pivot_longer(2:last_col(), names_to="visit",values_to="GAD") |>
mutate(
visit = as.numeric(gsub("visit_","",visit))
) |>
separate(patient, into=c("therapist","group","patient"), sep="_")
mod <- lmer(GAD~ visit*group+
(1+visit*group|therapist)+
(1+visit|therapist:patient),
df)
#| eval: false
df <- read_csv("https://uoepsy.github.io/data/lmm_laughs.csv")
head(df)
mod <- lmer(rating ~ delivery +
(1 + delivery | joke_id) +
(1 + delivery | ppt),
data = df)
#| eval: false
df <- read_csv("https://uoepsy.github.io/data/lmm_alcgad.csv")
df |> count(centerID)
df |> count(center)
df
df <- df |>
group_by(ppt) |>
mutate(
gadm = mean(gad),
gaddev = gad - mean(gad)
) |> ungroup()
lmer(alcunits ~ gadm + gaddev +
(1 + gaddev | center) +
(1 + gaddev | center:ppt),
df)
mod <- lmer(alcunits ~ gadm + gaddev +
(1 + gaddev | center) +
(1 + gaddev | center:ppt),
df)
summary(mod)
mod <- lmer(alcunits ~ gadm + gaddev + center +
(1 + gaddev | ppt),
df)
summary(mod)
mod <- lmer(alcunits ~ (gadm + gaddev)*intervention +
(1 + gaddev | center) +
(1 + gaddev | center:ppt),
df)
mod <- lmer(alcunits ~ (gadm + gaddev)*intervention +
(1 | center) +
(1 + gaddev | center:ppt),
df)
mod <- lmer(alcunits ~ center + (gadm + gaddev)*intervention +
(1 + gaddev | center:ppt),
df)
mod <- lmer(alcunits ~ center + (gadm + gaddev)*intervention +
(1 + gaddev | ppt),
df)
summary(mod)
mod <- lmer(alcunits ~ center + (gadm + gaddev)*intervention +
(1 | ppt),
df)
df <- read_csv("https://uoepsy.github.io/data/dapr3_tgu.csv")
mod <- lmer(tgu ~ physm + physdev +
(1 + physdev | patient),
data = df)
df |> group_by(patient) |>
mutate(
physm = mean(phys),
physdev = phys - mean(phys)
) |> ungroup()
mod <- lmer(tgu ~ physm + physdev +
(1 + physdev | patient),
data = df)
df <- read_csv("https://uoepsy.github.io/data/dapr3_tgu.csv")
df |> group_by(patient) |>
mutate(
physm = mean(phys),
physdev = phys - mean(phys)
) |> ungroup()
df <- df |> group_by(patient) |>
mutate(
physm = mean(phys),
physdev = phys - mean(phys)
) |> ungroup()
mod <- lmer(tgu ~ physm + physdev +
(1 + physdev | patient),
data = df)
df |> count(hospital)
mod <- lmer(tgu ~ hospital + physm + physdev +
(1 + physdev | patient),
data = df)
df <- read_csv("https://uoepsy.github.io/data/lmm_bflpe.csv")
head(df)
#| eval: false
df <- read_csv("https://uoepsy.github.io/data/lmm_bflpe.csv")
df <- df |> group_by(class) |>
mutate(
gradem = mean(grade),
gradedev = grade - mean(grade)
)
mod <- lmer(self_concept ~ gradem + gradedev +
(1 + gradedev | class),
data = df)
df <- read_csv("https://uoepsy.github.io/data/hangry.csv")
head(df)
df <- read_csv("https://uoepsy.github.io/data/hangry.csv")
df <- df |> group_by(ppt) |>
mutate(
hungerm = mean(q_hunger),
hungerdev = q_hunger - mean(q_hunger)
)
mod <- lmer(q_irritability ~ (hungerm + hungerdev) * fivetwo +
(1 + hungerdev | ppt),
data = df)
mod <- lmer(q_irritability ~ (hungerm + hungerdev) * fivetwo +
(1 + hungerdev | ppt),
data = df,
control=lmerControl(optimizer="bobyqa"))
install.packages("ggforce")
install.packages("ggfc")
install.packages("ggfx")
install.packages("ggside")
install.packages("buildmer")
install.packages("wordcloud")
df <- read_csv("https://uoepsy.github.io/lmm/lmmpcademo.csv")
# Chunk 1: setup
#| label: setup
#| include: false
source('assets/setup.R')
library(xaringanExtra)
library(tidyverse)
library(patchwork)
xaringanExtra::use_panelset()
library(lme4)
library(broom.mixed)
# Chunk 3: fig-tolerance
#| label: fig-tolerance
#| echo: false
#| fig-cap: "An optimizer will stop after a certain number of iterations, or when it meets a tolerance threshold"
knitr::include_graphics("images/tolerance.png")
# Chunk 4
#| echo: false
#| eval: false
#| out-width: "550px"
knitr::include_graphics("images/singular.png")
# Chunk 5: fig-singular
#| echo: false
#| label: fig-singular
#| out-width: "550px"
#| out-height: "300px"
#| fig-cap: "In simple random effect structures we can often easily see issues of overfitting as they are reflected in variances being estimated as 0 and/or correlations being estimated as perfect correlations of 1 or -1"
knitr::include_graphics("images/varcorrsingular.png")
# Chunk 6: fig-varcorr
#| echo: false
#| label: fig-varcorr
#| out-width: "519px"
#| out-height: "188x"
#| fig-cap: "The VarCorr() function shows the same information as in the top part of the summary() output - the variances/std.deviations of each random effect term, and the lower half of the correlation matrix of these terms (the upper half filled in here for illustration)"
knitr::include_graphics("images/varcorr.png")
# Chunk 7: fig-perfcor
#| echo: false
#| label: fig-perfcor
#| out-width: "100%"
#| fig-cap: "Group specific lines when intercepts and slopes are perfectly positively (Left) and negatively (Right) correlated"
library(ggforce)
library(ggfx)
set.seed(665)
N = 100
n_groups = 10
g = rep(1:n_groups, e = N/n_groups)
x = rep(0:9,n_groups)
re0 = rnorm(n_groups, sd = 1)
re = re0[g]
rex = re0/2
re_x = rex[g]
lp = (0 + re) + (1 + re_x) * x
y = rnorm(N, mean = lp, sd = .1)
d1=data.frame(x, g = factor(g), y)
rex = -1*re0/2
re_x = rex[g]
lp = (0 + re) + (.1 + re_x) * x
y = rnorm(N, mean = lp, sd = .1)
d2=data.frame(x, g = factor(g), y)
while(TRUE){
rex <<- rnorm(n_groups, sd = 1)
if(abs(cor(re0,rex))<.01){break}
}
re_x = rex[g]
lp = (0 + re) + (.1 + re_x) * x
y = rnorm(N, mean = lp, sd = .1)
d3=data.frame(x, g = factor(g), y)
ggplot(d1)+
stat_smooth(aes(x=x,y=y,group=g,col=factor(g,levels=1:10)),method=lm,se=F,size=1)+
guides(col="none")+
labs(x="x1",y=".fitted",subtitle="cor(ints,slopes) = 1") +
scale_y_continuous(breaks=NULL) -> pp1
ggplot(d2)+
stat_smooth(aes(x=x,y=y,group=g,col=factor(g,levels=1:10)),method=lm,se=F,size=1)+
guides(col="none")+
labs(x="x1",y=".fitted",subtitle="cor(ints,slopes) = -1")+
scale_y_continuous(breaks=NULL) -> pp2
ggplot(d3)+
stat_smooth(aes(x=x,y=y,group=g,col=factor(g,levels=1:10)),method=lm,se=F,size=1)+
guides(col="none")+
labs(x="x1",y=".fitted",subtitle="cor(ints,slopes) = 0")+
scale_y_continuous(breaks=NULL) -> pp3
#
m1 = lmer(y~1+x+(1+x|g),d1)
#VarCorr(m1)
m2 = lmer(y~1+x+(1+x|g),d2)
#VarCorr(m2)
m3 = lmer(y~1+x+(1+x|g),d3)
#VarCorr(m3)
library(ggside)
pdist = MASS::mvrnorm(1e5, mu=c(0,0),Sigma=VarCorr(m1)[[1]]) |>
as_tibble() |>
mutate(int=`(Intercept)`)
as.data.frame(ranef(m1)$g) |>
rownames_to_column() |>
mutate(int=`(Intercept)`,rowname=factor(rowname,levels=1:10)) |>
ggplot(aes(x=int,y=x)) +
guides(col="none")+
stat_smooth(se=F,fullrange=T,col="black",size=.5)+
with_blur(geom_point(aes(col=rowname),size=3,alpha=.8),sigma=1) +
#geom_density2d(data=pdist[1:1e4,]) +
scale_x_continuous("intercepts")+
scale_y_continuous("slopes")+
geom_xsidedensity(data=pdist,fill="#a41ae4", alpha=.4,col=NA)+
geom_ysidedensity(data=pdist,fill="#a41ae4", alpha=.4, col=NA)+
theme_ggside_void() -> pp4
pdist = MASS::mvrnorm(1e5, mu=c(0,0),Sigma=VarCorr(m2)[[1]]) |>
as_tibble() |>
mutate(int=`(Intercept)`)
as.data.frame(ranef(m2)$g) |>
rownames_to_column() |>
mutate(int=`(Intercept)`,rowname=factor(rowname,levels=1:10)) |>
ggplot(aes(x=int,y=x)) +
guides(col="none")+
stat_smooth(se=F,fullrange=T,col="black",size=.5)+
with_blur(geom_point(aes(col=rowname),size=3,alpha=.8),sigma=1) +
#geom_density2d(data=pdist[1:1e4,]) +
scale_x_continuous("intercepts")+
scale_y_continuous("slopes")+
geom_xsidedensity(data=pdist,fill="#a41ae4", alpha=.4,col=NA)+
geom_ysidedensity(data=pdist,fill="#a41ae4", alpha=.4, col=NA)+
theme_ggside_void() -> pp5
pdist = MASS::mvrnorm(1e5, mu=c(0,0),Sigma=VarCorr(m3)[[1]]) |>
as_tibble() |>
mutate(int=`(Intercept)`)
as.data.frame(ranef(m3)$g) |>
rownames_to_column() |>
mutate(int=`(Intercept)`,rowname=factor(rowname,levels=1:10)) |>
ggplot(aes(x=int,y=x)) +
guides(col="none")+
#stat_smooth(se=F,fullrange=T,col="black",size=.5)+
with_blur(geom_point(aes(col=rowname),size=3,alpha=.8),sigma=1) +
geom_density2d(data=pdist[1:1e4,],col="black") +
scale_x_continuous("intercepts")+
scale_y_continuous("slopes")+
geom_xsidedensity(data=pdist,fill="#a41ae4", alpha=.4,col=NA)+
geom_ysidedensity(data=pdist,fill="#a41ae4", alpha=.4, col=NA)+
theme_ggside_void() -> pp6
(pp1 + pp3 + pp2)/(pp4 + pp6 + pp5)
# Chunk 8
#| echo: false
gx = tibble(
g = c("p1","p1","p1","...","p2","p2","..."),
x = c("a","a","b","...","a","b","..."),
`g:x` = as.character(interaction(g,x))
)
gx[c(4,7),3] <- "..."
gx$g = paste0("  ",gx$g,"   ")
gx$x = paste0("  ",gx$x,"   ")
names(gx)<-c("  g   ","  x   ","g:x")
as.data.frame(gx)
# Chunk 9
#| echo: false
#| out-height: "200px"
set.seed(678)
df = tibble(
g = rep(1:3,e=9),
x = rep(1:3,9),
s = rep(c(-1,.5,1),e=9),
y = scale(g) + s*scale(x) + rnorm(27)
) |> mutate(x=map_chr(x,~letters[.]))
df |> mutate(g=paste0("group = ",g)) |>
ggplot(aes(x=x,y=y,fill=factor(g)))+
geom_boxplot()+
stat_summary(geom="label",aes(label=x),fill="white")+
facet_wrap(~g)+
guides(fill="none")
# Chunk 10
#| echo: false
#| out-height: "200px"
library(ggdist)
library(distributional)
g12s = aggregate(df$y,list(df$g,df$x),mean) |>
as_tibble() |>
mutate(g=Group.1,x=Group.2)
g1s = aggregate(df$y,list(df$g,df$x),mean) |>
as_tibble() |>
group_by(g=Group.1) |>
summarise(m = mean(V1),s=1.03)
ggplot(df,aes(x=0,y=y,fill=factor(g)))+
geom_boxplot(aes(group=interaction(x,g)),
width=1,
position=position_dodge(width = .3))+
stat_summary(geom="label",aes(label=x,group=interaction(x,g)),fill="white",position=position_dodge(width=.3))+
geom_point(data=g1s,aes(x=-1.2,y=m,col=factor(g)),size=2)+
geom_point(data=g12s,aes(x=-.3,y=V1,col=factor(g)),size=2)+
stat_eye(inherit.aes=FALSE,side="left",
data=tibble(x=1,y=1),
aes(x=-1.2,
ydist=dist_normal(mean(df$y),sd(aggregate(df$y,list(df$g),mean)$V1))),
alpha=.2)+
stat_eye(inherit.aes=FALSE,side="left",
data=g1s,
aes(x=-.3,
ydist=dist_normal(m,s),fill=factor(g)),
alpha=.2)+
scale_x_continuous(NULL,breaks=NULL)+
scale_y_continuous("y",breaks=NULL)+
guides(fill="none",col="none")+
theme_minimal()
# Chunk 11
#| echo: false
#| eval: false
set.seed(132)
n_groups = 20
xgrid = expand_grid(x1=0:1,x2=0:1)
g = rep(1:n_groups, e = nrow(xgrid)*5)
x1 = rnorm(length(g))
x2 = rnorm(length(g))
x3 = rnorm(length(g))
re = MASS::mvrnorm(n=n_groups, mu=rep(0,3),Sigma = diag(3)*c(3,2,1))
summary(re)
re0 = re[,1][g]
rex1 = re[,2][g]
rex2 = re[,3][g]
lp = (0 + re0) + (2 + rex1) * x1 + (1 + rex2) * x2 + -1*x1*x2
y = rnorm(length(g), mean = lp, sd = 2)
df = data.frame(x1,x2,x3,g = factor(g), y)
write_csv(df,"../docs/lmmpcademo.csv")
df <- read_csv("https://uoepsy.github.io/lmm/lmmpcademo.csv")
#| echo: false
#| eval: false
set.seed(132)
n_groups = 20
xgrid = expand_grid(x1=0:1,x2=0:1)
g = rep(1:n_groups, e = nrow(xgrid)*5)
x1 = rnorm(length(g))
x2 = rnorm(length(g))
x3 = rnorm(length(g))
re = MASS::mvrnorm(n=n_groups, mu=rep(0,3),Sigma = diag(3)*c(3,2,1))
summary(re)
re0 = re[,1][g]
rex1 = re[,2][g]
rex2 = re[,3][g]
lp = (0 + re0) + (2 + rex1) * x1 + (1 + rex2) * x2 + -1*x1*x2
y = rnorm(length(g), mean = lp, sd = 2)
df = data.frame(x1,x2,x3,g = factor(g), y)
write_csv(df,"../../data/lmmpcademo.csv")
